{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { DMSans_400Regular, DMSans_700Bold } from '@expo-google-fonts/dm-sans';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { AuthProvider } from \"./src/hooks/useAuth\";\nimport { Routes } from \"./src/routes\";\nimport { ThemeProvider } from 'styled-components/native';\nimport theme from \"./src/styles/theme\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nLogBox.ignoreLogs([\"EventEmitter.removeListener('url', ...): Method has been deprecated. Please instead use `remove()` on the subscription returned by `EventEmitter.addListener`.\"]);\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    appIsReady = _useState2[0],\n    setAppIsReady = _useState2[1];\n  useEffect(function () {\n    function prepare() {\n      return _regeneratorRuntime.async(function prepare$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(SplashScreen.preventAutoHideAsync());\n          case 3:\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Font.loadAsync({\n              DMSans_400Regular: DMSans_400Regular,\n              DMSans_700Bold: DMSans_700Bold\n            }));\n          case 5:\n            _context.next = 10;\n            break;\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.warn(_context.t0);\n          case 10:\n            _context.prev = 10;\n            setAppIsReady(true);\n            return _context.finish(10);\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }, null, null, [[0, 7, 10, 13]], Promise);\n    }\n    prepare();\n  }, []);\n  var onLayoutRootView = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!appIsReady) {\n            _context2.next = 3;\n            break;\n          }\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(SplashScreen.hideAsync());\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, null, null, null, Promise);\n  }, [appIsReady]);\n  if (!appIsReady) {\n    return null;\n  }\n  return _jsx(GestureHandlerRootView, {\n    onLayout: onLayoutRootView,\n    style: {\n      flex: 1\n    },\n    children: _jsx(AuthProvider, {\n      children: _jsxs(ThemeProvider, {\n        theme: theme,\n        children: [_jsx(StatusBar, {\n          style: \"light\",\n          backgroundColor: \"transparent\",\n          translucent: true\n        }), _jsx(Routes, {})]\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useCallback","useEffect","useState","StatusBar","DMSans_400Regular","DMSans_700Bold","SplashScreen","Font","GestureHandlerRootView","AuthProvider","Routes","ThemeProvider","theme","LogBox","jsx","_jsx","jsxs","_jsxs","ignoreLogs","App","_useState","_useState2","_slicedToArray","appIsReady","setAppIsReady","prepare","_regeneratorRuntime","async","prepare$","_context","prev","next","awrap","preventAutoHideAsync","loadAsync","t0","console","warn","finish","stop","Promise","onLayoutRootView","_callee","_callee$","_context2","hideAsync","onLayout","style","flex","children","backgroundColor","translucent"],"sources":["/Users/fael_st/www/react-native/stream-app/App.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { DMSans_400Regular, DMSans_700Bold } from '@expo-google-fonts/dm-sans';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\nimport { AuthProvider } from './src/hooks/useAuth';\nimport { Routes } from './src/routes';\nimport { ThemeProvider } from 'styled-components/native';\n\nimport theme from './src/styles/theme';\nimport { LogBox } from 'react-native';\n\nLogBox.ignoreLogs([\n  \"EventEmitter.removeListener('url', ...): Method has been deprecated. Please instead use `remove()` on the subscription returned by `EventEmitter.addListener`.\"\n])\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        await SplashScreen.preventAutoHideAsync();\n        await Font.loadAsync({\n          DMSans_400Regular,\n          DMSans_700Bold\n        });\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, [])\n  \n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady) {\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <GestureHandlerRootView\n      onLayout={onLayoutRootView}\n      style={{ flex: 1 }}\n    >\n      <AuthProvider>\n        <ThemeProvider theme={theme}>\n          <StatusBar style=\"light\" backgroundColor=\"transparent\" translucent />\n          <Routes />\n        </ThemeProvider>\n      </AuthProvider>\n    </GestureHandlerRootView>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}