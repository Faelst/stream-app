{"ast":null,"code":"var _window$document;\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from 'expo-modules-core';\nimport qs from 'qs';\nvar isDOMAvailable = Platform.OS === 'web' && typeof window !== 'undefined' && !!((_window$document = window.document) != null && _window$document.createElement) && typeof URL !== 'undefined';\nexport function requestAsync(requestUrl, fetchRequest) {\n  var _fetchRequest$dataTyp;\n  var url, request, isJsonDataType, i, _fetchRequest$method, _i, _Object$keys, key, correctedUrl, response, contentType;\n  return _regeneratorRuntime.async(function requestAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        if (!(Platform.OS === 'web' && !isDOMAvailable)) {\n          _context.next = 2;\n          break;\n        }\n        return _context.abrupt(\"return\");\n      case 2:\n        url = new URL(requestUrl);\n        request = {\n          method: fetchRequest.method,\n          mode: 'cors',\n          headers: {}\n        };\n        isJsonDataType = ((_fetchRequest$dataTyp = fetchRequest.dataType) == null ? void 0 : _fetchRequest$dataTyp.toLowerCase()) === 'json';\n        if (fetchRequest.headers) {\n          for (i in fetchRequest.headers) {\n            if (i in fetchRequest.headers) {\n              request.headers[i] = fetchRequest.headers[i];\n            }\n          }\n        }\n        if (fetchRequest.body) {\n          if (((_fetchRequest$method = fetchRequest.method) == null ? void 0 : _fetchRequest$method.toUpperCase()) === 'POST') {\n            request.body = qs.stringify(fetchRequest.body);\n          } else {\n            for (_i = 0, _Object$keys = Object.keys(fetchRequest.body); _i < _Object$keys.length; _i++) {\n              key = _Object$keys[_i];\n              url.searchParams.append(key, fetchRequest.body[key]);\n            }\n          }\n        }\n        if (isJsonDataType && !('Accept' in request.headers)) {\n          request.headers['Accept'] = 'application/json, text/javascript; q=0.01';\n        }\n        correctedUrl = url.toString().replace(/\\/$/, '');\n        _context.next = 11;\n        return _regeneratorRuntime.awrap(fetch(correctedUrl, request));\n      case 11:\n        response = _context.sent;\n        contentType = response.headers.get('content-type');\n        if (!(isJsonDataType || contentType != null && contentType.includes('application/json'))) {\n          _context.next = 15;\n          break;\n        }\n        return _context.abrupt(\"return\", response.json());\n      case 15:\n        return _context.abrupt(\"return\", response.text());\n      case 16:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["Platform","qs","isDOMAvailable","OS","window","_window$document","document","createElement","URL","requestAsync","requestUrl","fetchRequest","_fetchRequest$dataTyp","url","request","isJsonDataType","i","_fetchRequest$method","_i","_Object$keys","key","correctedUrl","response","contentType","_regeneratorRuntime","async","requestAsync$","_context","prev","next","abrupt","method","mode","headers","dataType","toLowerCase","body","toUpperCase","stringify","Object","keys","length","searchParams","append","toString","replace","awrap","fetch","sent","get","includes","json","text","stop","Promise"],"sources":["/Users/fael_st/www/react-native/stream-app/node_modules/expo-auth-session/src/Fetch.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport qs from 'qs';\n\nexport type Headers = Record<string, string> & {\n  'Content-Type': string;\n  Authorization?: string;\n  Accept?: string;\n};\n\nexport type FetchRequest = {\n  headers?: Headers;\n  body?: Record<string, string>;\n  dataType?: string;\n  method?: string;\n};\n\n// TODO(Bacon): pending react-native-adapter publish after sdk 38\nconst isDOMAvailable =\n  Platform.OS === 'web' &&\n  typeof window !== 'undefined' &&\n  !!window.document?.createElement &&\n  typeof URL !== 'undefined';\n\nexport async function requestAsync<T>(requestUrl: string, fetchRequest: FetchRequest): Promise<T> {\n  if (Platform.OS === 'web' && !isDOMAvailable) {\n    // @ts-ignore\n    return;\n  }\n  const url = new URL(requestUrl);\n\n  const request: Omit<RequestInit, 'headers'> & { headers: HeadersInit } = {\n    method: fetchRequest.method,\n    mode: 'cors',\n    headers: {},\n  };\n\n  const isJsonDataType = fetchRequest.dataType?.toLowerCase() === 'json';\n\n  if (fetchRequest.headers) {\n    for (const i in fetchRequest.headers) {\n      if (i in fetchRequest.headers) {\n        request.headers[i] = fetchRequest.headers[i] as string;\n      }\n    }\n  }\n\n  if (fetchRequest.body) {\n    if (fetchRequest.method?.toUpperCase() === 'POST') {\n      request.body = qs.stringify(fetchRequest.body);\n    } else {\n      for (const key of Object.keys(fetchRequest.body)) {\n        url.searchParams.append(key, fetchRequest.body[key]);\n      }\n    }\n  }\n\n  if (isJsonDataType && !('Accept' in request.headers)) {\n    // NOTE: Github authentication will return XML if this includes the standard `*/*`\n    request.headers['Accept'] = 'application/json, text/javascript; q=0.01';\n  }\n\n  // Fix a problem with React Native `URL` causing a trailing slash to be added.\n  const correctedUrl = url.toString().replace(/\\/$/, '');\n\n  const response = await fetch(correctedUrl, request);\n\n  const contentType = response.headers.get('content-type');\n  if (isJsonDataType || contentType?.includes('application/json')) {\n    return response.json();\n  }\n  // @ts-ignore: Type 'string' is not assignable to type 'T'.\n  return response.text();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}