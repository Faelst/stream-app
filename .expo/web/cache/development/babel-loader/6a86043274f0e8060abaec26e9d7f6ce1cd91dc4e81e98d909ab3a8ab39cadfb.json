{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nimport { dismissAuthSession, openAuthSessionAsync } from 'expo-web-browser';\nimport { AuthRequest } from \"./AuthRequest\";\nimport { CodeChallengeMethod, Prompt, ResponseType } from \"./AuthRequest.types\";\nimport { fetchDiscoveryAsync, resolveDiscoveryAsync } from \"./Discovery\";\nimport { generateHexStringAsync } from \"./PKCE\";\nimport { getQueryParams } from \"./QueryParams\";\nimport sessionUrlProvider from \"./SessionUrlProvider\";\nvar _authLock = false;\nexport function startAsync(options) {\n  var authUrl, returnUrl, startUrl, showInRecents, result, _getQueryParams, params, errorCode;\n  return _regeneratorRuntime.async(function startAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        authUrl = options.authUrl;\n        if (authUrl) {\n          _context.next = 3;\n          break;\n        }\n        throw new Error('No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n      case 3:\n        if (!_authLock) {\n          _context.next = 6;\n          break;\n        }\n        if (__DEV__) {\n          console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n        }\n        return _context.abrupt(\"return\", {\n          type: 'locked'\n        });\n      case 6:\n        returnUrl = options.returnUrl || sessionUrlProvider.getDefaultReturnUrl();\n        startUrl = sessionUrlProvider.getStartUrl(authUrl, returnUrl, options.projectNameForProxy);\n        showInRecents = options.showInRecents || false;\n        _authLock = true;\n        _context.prev = 10;\n        _context.next = 13;\n        return _regeneratorRuntime.awrap(_openWebBrowserAsync(startUrl, returnUrl, showInRecents));\n      case 13:\n        result = _context.sent;\n      case 14:\n        _context.prev = 14;\n        _authLock = false;\n        return _context.finish(14);\n      case 17:\n        if (result) {\n          _context.next = 19;\n          break;\n        }\n        throw new Error('Unexpected missing AuthSession result');\n      case 19:\n        if ('url' in result) {\n          _context.next = 25;\n          break;\n        }\n        if (!('type' in result)) {\n          _context.next = 24;\n          break;\n        }\n        return _context.abrupt(\"return\", result);\n      case 24:\n        throw new Error('Unexpected AuthSession result with missing type');\n      case 25:\n        _getQueryParams = getQueryParams(result.url), params = _getQueryParams.params, errorCode = _getQueryParams.errorCode;\n        return _context.abrupt(\"return\", {\n          type: errorCode ? 'error' : 'success',\n          params: params,\n          errorCode: errorCode,\n          authentication: null,\n          url: result.url\n        });\n      case 27:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, [[10,, 14, 17]], Promise);\n}\nexport function dismiss() {\n  dismissAuthSession();\n}\nexport var getDefaultReturnUrl = sessionUrlProvider.getDefaultReturnUrl;\nexport function getRedirectUrl(path) {\n  return sessionUrlProvider.getRedirectUrl({\n    urlPath: path\n  });\n}\nexport function makeRedirectUri() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    native = _ref.native,\n    scheme = _ref.scheme,\n    isTripleSlashed = _ref.isTripleSlashed,\n    queryParams = _ref.queryParams,\n    path = _ref.path,\n    preferLocalhost = _ref.preferLocalhost,\n    useProxy = _ref.useProxy,\n    projectNameForProxy = _ref.projectNameForProxy;\n  if (Platform.OS !== 'web' && native && [ExecutionEnvironment.Standalone, ExecutionEnvironment.Bare].includes(Constants.executionEnvironment)) {\n    return native;\n  }\n  if (!useProxy || Platform.OS === 'web') {\n    var url = Linking.createURL(path || '', {\n      isTripleSlashed: isTripleSlashed,\n      scheme: scheme,\n      queryParams: queryParams\n    });\n    if (preferLocalhost) {\n      var ipAddress = url.match(/\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/);\n      if (ipAddress != null && ipAddress.length) {\n        var _url$split = url.split(ipAddress[0]),\n          _url$split2 = _slicedToArray(_url$split, 2),\n          protocol = _url$split2[0],\n          _path = _url$split2[1];\n        return protocol + \"localhost\" + _path;\n      }\n    }\n    return url;\n  }\n  return sessionUrlProvider.getRedirectUrl({\n    urlPath: path,\n    projectNameForProxy: projectNameForProxy\n  });\n}\nexport function loadAsync(config, issuerOrDiscovery) {\n  var request, discovery;\n  return _regeneratorRuntime.async(function loadAsync$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        request = new AuthRequest(config);\n        _context2.next = 3;\n        return _regeneratorRuntime.awrap(resolveDiscoveryAsync(issuerOrDiscovery));\n      case 3:\n        discovery = _context2.sent;\n        _context2.next = 6;\n        return _regeneratorRuntime.awrap(request.makeAuthUrlAsync(discovery));\n      case 6:\n        return _context2.abrupt(\"return\", request);\n      case 7:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction _openWebBrowserAsync(startUrl, returnUrl, showInRecents) {\n  var result;\n  return _regeneratorRuntime.async(function _openWebBrowserAsync$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.next = 2;\n        return _regeneratorRuntime.awrap(openAuthSessionAsync(startUrl, returnUrl, {\n          showInRecents: showInRecents\n        }));\n      case 2:\n        result = _context3.sent;\n        if (!(result.type === 'cancel' || result.type === 'dismiss')) {\n          _context3.next = 5;\n          break;\n        }\n        return _context3.abrupt(\"return\", {\n          type: result.type\n        });\n      case 5:\n        return _context3.abrupt(\"return\", result);\n      case 6:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport { useAutoDiscovery, useAuthRequest } from \"./AuthRequestHooks\";\nexport { AuthError, TokenError } from \"./Errors\";\nexport { AuthRequest, CodeChallengeMethod, Prompt, ResponseType, resolveDiscoveryAsync, fetchDiscoveryAsync, generateHexStringAsync };\nexport { TokenResponse, AccessTokenRequest, RefreshTokenRequest, RevokeTokenRequest, revokeAsync, refreshAsync, exchangeCodeAsync, fetchUserInfoAsync } from \"./TokenRequest\";\nexport * from \"./TokenRequest.types\";","map":{"version":3,"names":["Constants","ExecutionEnvironment","Linking","Platform","dismissAuthSession","openAuthSessionAsync","AuthRequest","CodeChallengeMethod","Prompt","ResponseType","fetchDiscoveryAsync","resolveDiscoveryAsync","generateHexStringAsync","getQueryParams","sessionUrlProvider","_authLock","startAsync","options","authUrl","returnUrl","startUrl","showInRecents","result","_getQueryParams","params","errorCode","_regeneratorRuntime","async","startAsync$","_context","prev","next","Error","__DEV__","console","warn","abrupt","type","getDefaultReturnUrl","getStartUrl","projectNameForProxy","awrap","_openWebBrowserAsync","sent","finish","url","authentication","stop","Promise","dismiss","getRedirectUrl","path","urlPath","makeRedirectUri","_ref","arguments","length","undefined","native","scheme","isTripleSlashed","queryParams","preferLocalhost","useProxy","OS","Standalone","Bare","includes","executionEnvironment","createURL","ipAddress","match","_url$split","split","_url$split2","_slicedToArray","protocol","loadAsync","config","issuerOrDiscovery","request","discovery","loadAsync$","_context2","makeAuthUrlAsync","_openWebBrowserAsync$","_context3","useAutoDiscovery","useAuthRequest","AuthError","TokenError","TokenResponse","AccessTokenRequest","RefreshTokenRequest","RevokeTokenRequest","revokeAsync","refreshAsync","exchangeCodeAsync","fetchUserInfoAsync"],"sources":["/Users/fael_st/www/react-native/stream-app/node_modules/expo-auth-session/src/AuthSession.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nimport {\n  dismissAuthSession,\n  openAuthSessionAsync,\n  WebBrowserAuthSessionResult,\n} from 'expo-web-browser';\n\nimport { AuthRequest } from './AuthRequest';\nimport {\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  Prompt,\n  ResponseType,\n} from './AuthRequest.types';\nimport {\n  AuthSessionOptions,\n  AuthSessionRedirectUriOptions,\n  AuthSessionResult,\n} from './AuthSession.types';\nimport {\n  DiscoveryDocument,\n  fetchDiscoveryAsync,\n  Issuer,\n  IssuerOrDiscovery,\n  ProviderMetadata,\n  resolveDiscoveryAsync,\n} from './Discovery';\nimport { generateHexStringAsync } from './PKCE';\nimport { getQueryParams } from './QueryParams';\nimport sessionUrlProvider from './SessionUrlProvider';\n\nlet _authLock = false;\n\n// @needsAudit\n/**\n * Initiate a proxied authentication session with the given options. Only one `AuthSession` can be active at any given time in your application.\n * If you attempt to open a second session while one is still in progress, the second session will return a value to indicate that `AuthSession` is locked.\n *\n * @param options An object of type `AuthSessionOptions`.\n * @return Returns a Promise that resolves to an `AuthSessionResult` object.\n */\nexport async function startAsync(options: AuthSessionOptions): Promise<AuthSessionResult> {\n  const authUrl = options.authUrl;\n  // Prevent accidentally starting to an empty url\n  if (!authUrl) {\n    throw new Error(\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n  }\n  // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n  // support it this makes the behavior predictable.\n  if (_authLock) {\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n      );\n    }\n\n    return { type: 'locked' };\n  }\n\n  const returnUrl = options.returnUrl || sessionUrlProvider.getDefaultReturnUrl();\n  const startUrl = sessionUrlProvider.getStartUrl(authUrl, returnUrl, options.projectNameForProxy);\n  const showInRecents = options.showInRecents || false;\n\n  // About to start session, set lock\n  _authLock = true;\n\n  let result: WebBrowserAuthSessionResult;\n  try {\n    result = await _openWebBrowserAsync(startUrl, returnUrl, showInRecents);\n  } finally {\n    // WebBrowser session complete, unset lock\n    _authLock = false;\n  }\n\n  // Handle failures\n  if (!result) {\n    throw new Error('Unexpected missing AuthSession result');\n  }\n  if (!('url' in result)) {\n    if ('type' in result) {\n      return result;\n    } else {\n      throw new Error('Unexpected AuthSession result with missing type');\n    }\n  }\n\n  const { params, errorCode } = getQueryParams(result.url);\n\n  return {\n    type: errorCode ? 'error' : 'success',\n    params,\n    errorCode,\n    authentication: null,\n    url: result.url,\n  };\n}\n\n// @needsAudit\n/**\n * Cancels an active `AuthSession` if there is one. No return value, but if there is an active `AuthSession`\n * then the Promise returned by the `AuthSession.startAsync()` that initiated it resolves to `{ type: 'dismiss' }`.\n */\nexport function dismiss() {\n  dismissAuthSession();\n}\n\nexport const getDefaultReturnUrl = sessionUrlProvider.getDefaultReturnUrl;\n\n// @needsAudit @docsMissing\n/**\n * Get the URL that your authentication provider needs to redirect to. For example: `https://auth.expo.io/@your-username/your-app-slug`. You can pass an additional path component to be appended to the default redirect URL.\n * > **Note** This method will throw an exception if you're using the bare workflow on native.\n *\n * @param path\n * @return\n *\n * @example\n * ```ts\n * const url = AuthSession.getRedirectUrl('redirect');\n *\n * // Managed: https://auth.expo.io/@your-username/your-app-slug/redirect\n * // Web: https://localhost:19006/redirect\n * ```\n *\n * @deprecated Use `makeRedirectUri({ path, useProxy })` instead.\n */\nexport function getRedirectUrl(path?: string): string {\n  return sessionUrlProvider.getRedirectUrl({ urlPath: path });\n}\n\n// @needsAudit\n/**\n * Create a redirect url for the current platform and environment. You need to manually define the redirect that will be used in\n * a bare workflow React Native app, or an Expo standalone app, this is because it cannot be inferred automatically.\n * - **Web:** Generates a path based on the current `window.location`. For production web apps, you should hard code the URL as well.\n * - **Managed workflow:** Uses the `scheme` property of your `app.config.js` or `app.json`.\n *   - **Proxy:** Uses `auth.expo.io` as the base URL for the path. This only works in Expo Go and standalone environments.\n * - **Bare workflow:** Will fallback to using the `native` option for bare workflow React Native apps.\n *\n * @param options Additional options for configuring the path.\n * @return The `redirectUri` to use in an authentication request.\n *\n * @example\n * ```ts\n * const redirectUri = makeRedirectUri({\n *   scheme: 'my-scheme',\n *   path: 'redirect'\n * });\n * // Custom app: my-scheme://redirect\n * // Expo Go: exp://127.0.0.1:19000/--/redirect\n * // Web dev: https://localhost:19006/redirect\n * // Web prod: https://yourwebsite.com/redirect\n *\n * const redirectUri2 = makeRedirectUri({\n *   scheme: 'scheme2',\n *   preferLocalhost: true,\n *   isTripleSlashed: true,\n * });\n * // Custom app: scheme2:///\n * // Expo Go: exp://localhost:19000\n * // Web dev: https://localhost:19006\n * // Web prod: https://yourwebsite.com\n *\n * const redirectUri3 = makeRedirectUri({\n *   useProxy: true,\n * });\n * // Custom app: https://auth.expo.io/@username/slug\n * // Expo Go: https://auth.expo.io/@username/slug\n * // Web dev: https://localhost:19006\n * // Web prod: https://yourwebsite.com\n * ```\n */\nexport function makeRedirectUri({\n  native,\n  scheme,\n  isTripleSlashed,\n  queryParams,\n  path,\n  preferLocalhost,\n  useProxy,\n  projectNameForProxy,\n}: AuthSessionRedirectUriOptions = {}): string {\n  if (\n    Platform.OS !== 'web' &&\n    native &&\n    [ExecutionEnvironment.Standalone, ExecutionEnvironment.Bare].includes(\n      Constants.executionEnvironment\n    )\n  ) {\n    // Should use the user-defined native scheme in standalone builds\n    return native;\n  }\n  if (!useProxy || Platform.OS === 'web') {\n    const url = Linking.createURL(path || '', {\n      isTripleSlashed,\n      scheme,\n      queryParams,\n    });\n\n    if (preferLocalhost) {\n      const ipAddress = url.match(\n        /\\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/\n      );\n      // Only replace if an IP address exists\n      if (ipAddress?.length) {\n        const [protocol, path] = url.split(ipAddress[0]);\n        return `${protocol}localhost${path}`;\n      }\n    }\n\n    return url;\n  }\n  // Attempt to use the proxy\n  return sessionUrlProvider.getRedirectUrl({ urlPath: path, projectNameForProxy });\n}\n\n// @needsAudit\n/**\n * Build an `AuthRequest` and load it before returning.\n *\n * @param config A valid [`AuthRequestConfig`](#authrequestconfig) that specifies what provider to use.\n * @param issuerOrDiscovery A loaded [`DiscoveryDocument`](#discoverydocument) or issuer URL.\n * (Only `authorizationEndpoint` is required for requesting an authorization code).\n * @return Returns an instance of `AuthRequest` that can be used to prompt the user for authorization.\n */\nexport async function loadAsync(\n  config: AuthRequestConfig,\n  issuerOrDiscovery: IssuerOrDiscovery\n): Promise<AuthRequest> {\n  const request = new AuthRequest(config);\n  const discovery = await resolveDiscoveryAsync(issuerOrDiscovery);\n  await request.makeAuthUrlAsync(discovery);\n  return request;\n}\n\nasync function _openWebBrowserAsync(startUrl: string, returnUrl: string, showInRecents: boolean) {\n  const result = await openAuthSessionAsync(startUrl, returnUrl, { showInRecents });\n  if (result.type === 'cancel' || result.type === 'dismiss') {\n    return { type: result.type };\n  }\n\n  return result;\n}\n\nexport { useAutoDiscovery, useAuthRequest } from './AuthRequestHooks';\nexport { AuthError, TokenError } from './Errors';\n\nexport {\n  AuthSessionOptions,\n  AuthSessionRedirectUriOptions,\n  AuthSessionResult,\n  AuthRequest,\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  DiscoveryDocument,\n  Issuer,\n  IssuerOrDiscovery,\n  Prompt,\n  ProviderMetadata,\n  ResponseType,\n  resolveDiscoveryAsync,\n  fetchDiscoveryAsync,\n  generateHexStringAsync,\n};\n\nexport {\n  // Token classes\n  TokenResponse,\n  AccessTokenRequest,\n  RefreshTokenRequest,\n  RevokeTokenRequest,\n  // Token methods\n  revokeAsync,\n  refreshAsync,\n  exchangeCodeAsync,\n  fetchUserInfoAsync,\n} from './TokenRequest';\n\n// Token types\nexport * from './TokenRequest.types';\n\n// Provider specific types\nexport { GoogleAuthRequestConfig } from './providers/Google';\nexport { FacebookAuthRequestConfig } from './providers/Facebook';\n"],"mappings":";;AAAA,OAAOA,SAAS,IAAIC,oBAAoB,QAAQ,gBAAgB;AAChE,OAAO,KAAKC,OAAO,MAAM,cAAc;AACvC,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SACEC,kBAAkB,EAClBC,oBAAoB,QAEf,kBAAkB;AAEzB,SAASC,WAAW;AACpB,SAGEC,mBAAmB,EACnBC,MAAM,EACNC,YAAY;AAOd,SAEEC,mBAAmB,EAInBC,qBAAqB;AAEvB,SAASC,sBAAsB;AAC/B,SAASC,cAAc;AACvB,OAAOC,kBAAkB;AAEzB,IAAIC,SAAS,GAAG,KAAK;AAUrB,OAAO,SAAeC,UAAUA,CAACC,OAA2B;EAAA,IAAAC,OAAA,EAAAC,SAAA,EAAAC,QAAA,EAAAC,aAAA,EAAAC,MAAA,EAAAC,eAAA,EAAAC,MAAA,EAAAC,SAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,YAAAC,QAAA;IAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;MAAA;QACpDb,OAAO,GAAGD,OAAO,CAACC,OAAO;QAAA,IAE1BA,OAAO;UAAAW,QAAA,CAAAE,IAAA;UAAA;QAAA;QAAA,MACJ,IAAIC,KAAK,CACb,wIAAwI,CACzI;MAAA;QAAA,KAICjB,SAAS;UAAAc,QAAA,CAAAE,IAAA;UAAA;QAAA;QACX,IAAIE,OAAO,EAAE;UACXC,OAAO,CAACC,IAAI,CACV,qIAAqI,CACtI;;QACF,OAAAN,QAAA,CAAAO,MAAA,WAEM;UAAEC,IAAI,EAAE;QAAQ,CAAE;MAAA;QAGrBlB,SAAS,GAAGF,OAAO,CAACE,SAAS,IAAIL,kBAAkB,CAACwB,mBAAmB,EAAE;QACzElB,QAAQ,GAAGN,kBAAkB,CAACyB,WAAW,CAACrB,OAAO,EAAEC,SAAS,EAAEF,OAAO,CAACuB,mBAAmB,CAAC;QAC1FnB,aAAa,GAAGJ,OAAO,CAACI,aAAa,IAAI,KAAK;QAGpDN,SAAS,GAAG,IAAI;QAACc,QAAA,CAAAC,IAAA;QAAAD,QAAA,CAAAE,IAAA;QAAA,OAAAL,mBAAA,CAAAe,KAAA,CAIAC,oBAAoB,CAACtB,QAAQ,EAAED,SAAS,EAAEE,aAAa,CAAC;MAAA;QAAvEC,MAAM,GAAAO,QAAA,CAAAc,IAAA;MAAA;QAAAd,QAAA,CAAAC,IAAA;QAGNf,SAAS,GAAG,KAAK;QAAC,OAAAc,QAAA,CAAAe,MAAA;MAAA;QAAA,IAIftB,MAAM;UAAAO,QAAA,CAAAE,IAAA;UAAA;QAAA;QAAA,MACH,IAAIC,KAAK,CAAC,uCAAuC,CAAC;MAAA;QAAA,IAEpD,KAAK,IAAIV,MAAM;UAAAO,QAAA,CAAAE,IAAA;UAAA;QAAA;QAAA,MACf,MAAM,IAAIT,MAAM;UAAAO,QAAA,CAAAE,IAAA;UAAA;QAAA;QAAA,OAAAF,QAAA,CAAAO,MAAA,WACXd,MAAM;MAAA;QAAA,MAEP,IAAIU,KAAK,CAAC,iDAAiD,CAAC;MAAA;QAAAT,eAAA,GAIxCV,cAAc,CAACS,MAAM,CAACuB,GAAG,CAAC,EAAhDrB,MAAM,GAAAD,eAAA,CAANC,MAAM,EAAEC,SAAS,GAAAF,eAAA,CAATE,SAAS;QAAA,OAAAI,QAAA,CAAAO,MAAA,WAElB;UACLC,IAAI,EAAEZ,SAAS,GAAG,OAAO,GAAG,SAAS;UACrCD,MAAM,EAANA,MAAM;UACNC,SAAS,EAATA,SAAS;UACTqB,cAAc,EAAE,IAAI;UACpBD,GAAG,EAAEvB,MAAM,CAACuB;SACb;MAAA;MAAA;QAAA,OAAAhB,QAAA,CAAAkB,IAAA;IAAA;EAAA,gCAAAC,OAAA;AAAA;AAQH,OAAM,SAAUC,OAAOA,CAAA;EACrB7C,kBAAkB,EAAE;AACtB;AAEA,OAAO,IAAMkC,mBAAmB,GAAGxB,kBAAkB,CAACwB,mBAAmB;AAoBzE,OAAM,SAAUY,cAAcA,CAACC,IAAa;EAC1C,OAAOrC,kBAAkB,CAACoC,cAAc,CAAC;IAAEE,OAAO,EAAED;EAAI,CAAE,CAAC;AAC7D;AA4CA,OAAM,SAAUE,eAAeA,CAAA,EASM;EAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAF,EAAE;IARnCG,MAAM,GAAAJ,IAAA,CAANI,MAAM;IACNC,MAAM,GAAAL,IAAA,CAANK,MAAM;IACNC,eAAe,GAAAN,IAAA,CAAfM,eAAe;IACfC,WAAW,GAAAP,IAAA,CAAXO,WAAW;IACXV,IAAI,GAAAG,IAAA,CAAJH,IAAI;IACJW,eAAe,GAAAR,IAAA,CAAfQ,eAAe;IACfC,QAAQ,GAAAT,IAAA,CAARS,QAAQ;IACRvB,mBAAmB,GAAAc,IAAA,CAAnBd,mBAAmB;EAEnB,IACErC,QAAQ,CAAC6D,EAAE,KAAK,KAAK,IACrBN,MAAM,IACN,CAACzD,oBAAoB,CAACgE,UAAU,EAAEhE,oBAAoB,CAACiE,IAAI,CAAC,CAACC,QAAQ,CACnEnE,SAAS,CAACoE,oBAAoB,CAC/B,EACD;IAEA,OAAOV,MAAM;;EAEf,IAAI,CAACK,QAAQ,IAAI5D,QAAQ,CAAC6D,EAAE,KAAK,KAAK,EAAE;IACtC,IAAMnB,GAAG,GAAG3C,OAAO,CAACmE,SAAS,CAAClB,IAAI,IAAI,EAAE,EAAE;MACxCS,eAAe,EAAfA,eAAe;MACfD,MAAM,EAANA,MAAM;MACNE,WAAW,EAAXA;KACD,CAAC;IAEF,IAAIC,eAAe,EAAE;MACnB,IAAMQ,SAAS,GAAGzB,GAAG,CAAC0B,KAAK,CACzB,oKAAoK,CACrK;MAED,IAAID,SAAS,YAATA,SAAS,CAAEd,MAAM,EAAE;QACrB,IAAAgB,UAAA,GAAyB3B,GAAG,CAAC4B,KAAK,CAACH,SAAS,CAAC,CAAC,CAAC,CAAC;UAAAI,WAAA,GAAAC,cAAA,CAAAH,UAAA;UAAzCI,QAAQ,GAAAF,WAAA;UAAEvB,KAAI,GAAAuB,WAAA;QACrB,OAAUE,QAAQ,iBAAYzB,KAAI;;;IAItC,OAAON,GAAG;;EAGZ,OAAO/B,kBAAkB,CAACoC,cAAc,CAAC;IAAEE,OAAO,EAAED,IAAI;IAAEX,mBAAmB,EAAnBA;EAAmB,CAAE,CAAC;AAClF;AAWA,OAAO,SAAeqC,SAASA,CAC7BC,MAAyB,EACzBC,iBAAoC;EAAA,IAAAC,OAAA,EAAAC,SAAA;EAAA,OAAAvD,mBAAA,CAAAC,KAAA,UAAAuD,WAAAC,SAAA;IAAA,kBAAAA,SAAA,CAAArD,IAAA,GAAAqD,SAAA,CAAApD,IAAA;MAAA;QAE9BiD,OAAO,GAAG,IAAI1E,WAAW,CAACwE,MAAM,CAAC;QAAAK,SAAA,CAAApD,IAAA;QAAA,OAAAL,mBAAA,CAAAe,KAAA,CACf9B,qBAAqB,CAACoE,iBAAiB,CAAC;MAAA;QAA1DE,SAAS,GAAAE,SAAA,CAAAxC,IAAA;QAAAwC,SAAA,CAAApD,IAAA;QAAA,OAAAL,mBAAA,CAAAe,KAAA,CACTuC,OAAO,CAACI,gBAAgB,CAACH,SAAS,CAAC;MAAA;QAAA,OAAAE,SAAA,CAAA/C,MAAA,WAClC4C,OAAO;MAAA;MAAA;QAAA,OAAAG,SAAA,CAAApC,IAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA;AAGhB,SAAeN,oBAAoBA,CAACtB,QAAgB,EAAED,SAAiB,EAAEE,aAAsB;EAAA,IAAAC,MAAA;EAAA,OAAAI,mBAAA,CAAAC,KAAA,UAAA0D,sBAAAC,SAAA;IAAA,kBAAAA,SAAA,CAAAxD,IAAA,GAAAwD,SAAA,CAAAvD,IAAA;MAAA;QAAAuD,SAAA,CAAAvD,IAAA;QAAA,OAAAL,mBAAA,CAAAe,KAAA,CACxEpC,oBAAoB,CAACe,QAAQ,EAAED,SAAS,EAAE;UAAEE,aAAa,EAAbA;QAAa,CAAE,CAAC;MAAA;QAA3EC,MAAM,GAAAgE,SAAA,CAAA3C,IAAA;QAAA,MACRrB,MAAM,CAACe,IAAI,KAAK,QAAQ,IAAIf,MAAM,CAACe,IAAI,KAAK,SAAS;UAAAiD,SAAA,CAAAvD,IAAA;UAAA;QAAA;QAAA,OAAAuD,SAAA,CAAAlD,MAAA,WAChD;UAAEC,IAAI,EAAEf,MAAM,CAACe;QAAI,CAAE;MAAA;QAAA,OAAAiD,SAAA,CAAAlD,MAAA,WAGvBd,MAAM;MAAA;MAAA;QAAA,OAAAgE,SAAA,CAAAvC,IAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA;AAGf,SAASuC,gBAAgB,EAAEC,cAAc;AACzC,SAASC,SAAS,EAAEC,UAAU;AAE9B,SAIEpF,WAAW,EAGXC,mBAAmB,EAInBC,MAAM,EAENC,YAAY,EACZE,qBAAqB,EACrBD,mBAAmB,EACnBE,sBAAsB;AAGxB,SAEE+E,aAAa,EACbC,kBAAkB,EAClBC,mBAAmB,EACnBC,kBAAkB,EAElBC,WAAW,EACXC,YAAY,EACZC,iBAAiB,EACjBC,kBAAkB;AAIpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}