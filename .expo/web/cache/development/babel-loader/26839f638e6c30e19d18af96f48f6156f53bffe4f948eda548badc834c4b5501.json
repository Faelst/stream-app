{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExponentWebBrowser from \"./ExpoWebBrowser\";\nimport { WebBrowserResultType, WebBrowserPresentationStyle } from \"./WebBrowser.types\";\nexport { WebBrowserResultType, WebBrowserPresentationStyle };\nvar emptyCustomTabsPackages = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: []\n};\nexport function getCustomTabsSupportingBrowsersAsync() {\n  return _regeneratorRuntime.async(function getCustomTabsSupportingBrowsersAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        if (ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n          _context.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n      case 2:\n        if (!(Platform.OS !== 'android')) {\n          _context.next = 6;\n          break;\n        }\n        return _context.abrupt(\"return\", emptyCustomTabsPackages);\n      case 6:\n        _context.next = 8;\n        return _regeneratorRuntime.awrap(ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync());\n      case 8:\n        return _context.abrupt(\"return\", _context.sent);\n      case 9:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function warmUpAsync(browserPackage) {\n  return _regeneratorRuntime.async(function warmUpAsync$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        if (ExponentWebBrowser.warmUpAsync) {\n          _context2.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n      case 2:\n        if (!(Platform.OS !== 'android')) {\n          _context2.next = 6;\n          break;\n        }\n        return _context2.abrupt(\"return\", {});\n      case 6:\n        _context2.next = 8;\n        return _regeneratorRuntime.awrap(ExponentWebBrowser.warmUpAsync(browserPackage));\n      case 8:\n        return _context2.abrupt(\"return\", _context2.sent);\n      case 9:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function mayInitWithUrlAsync(url, browserPackage) {\n  return _regeneratorRuntime.async(function mayInitWithUrlAsync$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        if (ExponentWebBrowser.mayInitWithUrlAsync) {\n          _context3.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n      case 2:\n        if (!(Platform.OS !== 'android')) {\n          _context3.next = 6;\n          break;\n        }\n        return _context3.abrupt(\"return\", {});\n      case 6:\n        _context3.next = 8;\n        return _regeneratorRuntime.awrap(ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage));\n      case 8:\n        return _context3.abrupt(\"return\", _context3.sent);\n      case 9:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function coolDownAsync(browserPackage) {\n  return _regeneratorRuntime.async(function coolDownAsync$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        if (ExponentWebBrowser.coolDownAsync) {\n          _context4.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n      case 2:\n        if (!(Platform.OS !== 'android')) {\n          _context4.next = 6;\n          break;\n        }\n        return _context4.abrupt(\"return\", {});\n      case 6:\n        _context4.next = 8;\n        return _regeneratorRuntime.awrap(ExponentWebBrowser.coolDownAsync(browserPackage));\n      case 8:\n        return _context4.abrupt(\"return\", _context4.sent);\n      case 9:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, null, null, null, Promise);\n}\nvar browserLocked = false;\nexport function openBrowserAsync(url) {\n  var browserParams,\n    result,\n    _args5 = arguments;\n  return _regeneratorRuntime.async(function openBrowserAsync$(_context5) {\n    while (1) switch (_context5.prev = _context5.next) {\n      case 0:\n        browserParams = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n        if (ExponentWebBrowser.openBrowserAsync) {\n          _context5.next = 3;\n          break;\n        }\n        throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n      case 3:\n        if (!browserLocked) {\n          _context5.next = 6;\n          break;\n        }\n        if (__DEV__) {\n          console.warn('Attempted to call WebBrowser.openBrowserAsync multiple times while already active. Only one WebBrowser controller can be active at any given time.');\n        }\n        return _context5.abrupt(\"return\", {\n          type: WebBrowserResultType.LOCKED\n        });\n      case 6:\n        browserLocked = true;\n        _context5.prev = 7;\n        _context5.next = 10;\n        return _regeneratorRuntime.awrap(ExponentWebBrowser.openBrowserAsync(url, browserParams));\n      case 10:\n        result = _context5.sent;\n      case 11:\n        _context5.prev = 11;\n        browserLocked = false;\n        return _context5.finish(11);\n      case 14:\n        return _context5.abrupt(\"return\", result);\n      case 15:\n      case \"end\":\n        return _context5.stop();\n    }\n  }, null, null, [[7,, 11, 14]], Promise);\n}\nexport function dismissBrowser() {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  ExponentWebBrowser.dismissBrowser();\n}\nexport function openAuthSessionAsync(url, redirectUrl) {\n  var options,\n    _args6 = arguments;\n  return _regeneratorRuntime.async(function openAuthSessionAsync$(_context6) {\n    while (1) switch (_context6.prev = _context6.next) {\n      case 0:\n        options = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : {};\n        if (!_authSessionIsNativelySupported()) {\n          _context6.next = 9;\n          break;\n        }\n        if (ExponentWebBrowser.openAuthSessionAsync) {\n          _context6.next = 4;\n          break;\n        }\n        throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n      case 4:\n        if (!['ios', 'web'].includes(Platform.OS)) {\n          _context6.next = 6;\n          break;\n        }\n        return _context6.abrupt(\"return\", ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl, options));\n      case 6:\n        return _context6.abrupt(\"return\", ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl));\n      case 9:\n        return _context6.abrupt(\"return\", _openAuthSessionPolyfillAsync(url, redirectUrl, options));\n      case 10:\n      case \"end\":\n        return _context6.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function dismissAuthSession() {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\nexport function maybeCompleteAuthSession() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (ExponentWebBrowser.maybeCompleteAuthSession) {\n    return ExponentWebBrowser.maybeCompleteAuthSession(options);\n  }\n  return {\n    type: 'failed',\n    message: 'Not supported on this platform'\n  };\n}\nfunction _authSessionIsNativelySupported() {\n  if (Platform.OS === 'android') {\n    return false;\n  } else if (Platform.OS === 'web') {\n    return true;\n  }\n  var versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\nvar _redirectHandler = null;\nvar _onWebBrowserCloseAndroid = null;\nvar _isAppStateAvailable = AppState.currentState !== null;\nfunction _onAppStateChangeAndroid(state) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\nfunction _openBrowserAndWaitAndroidAsync(startUrl) {\n  var browserParams,\n    appStateChangedToActive,\n    stateChangeSubscription,\n    result,\n    type,\n    _await$openBrowserAsy,\n    _args7 = arguments;\n  return _regeneratorRuntime.async(function _openBrowserAndWaitAndroidAsync$(_context7) {\n    while (1) switch (_context7.prev = _context7.next) {\n      case 0:\n        browserParams = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n        appStateChangedToActive = new Promise(function (resolve) {\n          _onWebBrowserCloseAndroid = resolve;\n        });\n        stateChangeSubscription = AppState.addEventListener('change', _onAppStateChangeAndroid);\n        result = {\n          type: WebBrowserResultType.CANCEL\n        };\n        type = null;\n        _context7.prev = 5;\n        _context7.next = 8;\n        return _regeneratorRuntime.awrap(openBrowserAsync(startUrl, browserParams));\n      case 8:\n        _await$openBrowserAsy = _context7.sent;\n        type = _await$openBrowserAsy.type;\n        _context7.next = 17;\n        break;\n      case 12:\n        _context7.prev = 12;\n        _context7.t0 = _context7[\"catch\"](5);\n        stateChangeSubscription.remove();\n        _onWebBrowserCloseAndroid = null;\n        throw _context7.t0;\n      case 17:\n        if (!(type === 'opened')) {\n          _context7.next = 21;\n          break;\n        }\n        _context7.next = 20;\n        return _regeneratorRuntime.awrap(appStateChangedToActive);\n      case 20:\n        result = {\n          type: WebBrowserResultType.DISMISS\n        };\n      case 21:\n        stateChangeSubscription.remove();\n        _onWebBrowserCloseAndroid = null;\n        return _context7.abrupt(\"return\", result);\n      case 24:\n      case \"end\":\n        return _context7.stop();\n    }\n  }, null, null, [[5, 12]], Promise);\n}\nfunction _openAuthSessionPolyfillAsync(startUrl, returnUrl) {\n  var browserParams,\n    _args8 = arguments;\n  return _regeneratorRuntime.async(function _openAuthSessionPolyfillAsync$(_context8) {\n    while (1) switch (_context8.prev = _context8.next) {\n      case 0:\n        browserParams = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : {};\n        if (!_redirectHandler) {\n          _context8.next = 3;\n          break;\n        }\n        throw new Error(\"The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be\");\n      case 3:\n        if (!_onWebBrowserCloseAndroid) {\n          _context8.next = 5;\n          break;\n        }\n        throw new Error(\"WebBrowser is already open, only one can be open at a time\");\n      case 5:\n        _context8.prev = 5;\n        if (!(Platform.OS === 'android')) {\n          _context8.next = 12;\n          break;\n        }\n        _context8.next = 9;\n        return _regeneratorRuntime.awrap(Promise.race([_openBrowserAndWaitAndroidAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]));\n      case 9:\n        return _context8.abrupt(\"return\", _context8.sent);\n      case 12:\n        _context8.next = 14;\n        return _regeneratorRuntime.awrap(Promise.race([openBrowserAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]));\n      case 14:\n        return _context8.abrupt(\"return\", _context8.sent);\n      case 15:\n        _context8.prev = 15;\n        if (ExponentWebBrowser.dismissBrowser) {\n          ExponentWebBrowser.dismissBrowser();\n        }\n        _stopWaitingForRedirect();\n        return _context8.finish(15);\n      case 19:\n      case \"end\":\n        return _context8.stop();\n    }\n  }, null, null, [[5,, 15, 19]], Promise);\n}\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\"The WebBrowser auth session is in an invalid state with no redirect handler when one should be set\");\n  }\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\nfunction _waitForRedirectAsync(returnUrl) {\n  return new Promise(function (resolve) {\n    _redirectHandler = function _redirectHandler(event) {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({\n          url: event.url,\n          type: 'success'\n        });\n      }\n    };\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}","map":{"version":3,"names":["UnavailabilityError","AppState","Linking","Platform","ExponentWebBrowser","WebBrowserResultType","WebBrowserPresentationStyle","emptyCustomTabsPackages","defaultBrowserPackage","undefined","preferredBrowserPackage","browserPackages","servicePackages","getCustomTabsSupportingBrowsersAsync","_regeneratorRuntime","async","getCustomTabsSupportingBrowsersAsync$","_context","prev","next","OS","abrupt","awrap","sent","stop","Promise","warmUpAsync","browserPackage","warmUpAsync$","_context2","mayInitWithUrlAsync","url","mayInitWithUrlAsync$","_context3","coolDownAsync","coolDownAsync$","_context4","browserLocked","openBrowserAsync","browserParams","result","_args5","arguments","openBrowserAsync$","_context5","length","__DEV__","console","warn","type","LOCKED","finish","dismissBrowser","openAuthSessionAsync","redirectUrl","options","_args6","openAuthSessionAsync$","_context6","_authSessionIsNativelySupported","includes","_openAuthSessionPolyfillAsync","dismissAuthSession","maybeCompleteAuthSession","message","versionNumber","parseInt","String","Version","_redirectHandler","_onWebBrowserCloseAndroid","_isAppStateAvailable","currentState","_onAppStateChangeAndroid","state","_openBrowserAndWaitAndroidAsync","startUrl","appStateChangedToActive","stateChangeSubscription","_await$openBrowserAsy","_args7","_openBrowserAndWaitAndroidAsync$","_context7","resolve","addEventListener","CANCEL","t0","remove","DISMISS","returnUrl","_args8","_openAuthSessionPolyfillAsync$","_context8","Error","race","_waitForRedirectAsync","_stopWaitingForRedirect","removeEventListener","event","startsWith"],"sources":["/Users/fael_st/www/react-native/stream-app/node_modules/expo-web-browser/src/WebBrowser.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { AppState, AppStateStatus, Linking, Platform } from 'react-native';\n\nimport ExponentWebBrowser from './ExpoWebBrowser';\nimport {\n  RedirectEvent,\n  WebBrowserAuthSessionResult,\n  WebBrowserCompleteAuthSessionOptions,\n  WebBrowserCompleteAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n  WebBrowserPresentationStyle,\n  AuthSessionOpenOptions,\n} from './WebBrowser.types';\n\nexport {\n  WebBrowserAuthSessionResult,\n  WebBrowserCompleteAuthSessionOptions,\n  WebBrowserCompleteAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n  WebBrowserPresentationStyle,\n  AuthSessionOpenOptions,\n};\n\nconst emptyCustomTabsPackages: WebBrowserCustomTabsResults = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: [],\n};\n\n// @needsAudit\n/**\n * Returns a list of applications package names supporting Custom Tabs, Custom Tabs\n * service, user chosen and preferred one. This may not be fully reliable, since it uses\n * `PackageManager.getResolvingActivities` under the hood. (For example, some browsers might not be\n * present in browserPackages list once another browser is set to default.)\n *\n * @return The promise which fulfils with [`WebBrowserCustomTabsResults`](#webbrowsercustomtabsresults) object.\n * @platform android\n */\nexport async function getCustomTabsSupportingBrowsersAsync(): Promise<WebBrowserCustomTabsResults> {\n  if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n    throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return emptyCustomTabsPackages;\n  } else {\n    return await ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n  }\n}\n\n// @needsAudit\n/**\n * This method calls `warmUp` method on [CustomTabsClient](https://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#warmup(long))\n * for specified package.\n *\n * @param browserPackage Package of browser to be warmed up. If not set, preferred browser will be warmed.\n *\n * @return A promise which fulfils with `WebBrowserWarmUpResult` object.\n * @platform android\n */\nexport async function warmUpAsync(browserPackage?: string): Promise<WebBrowserWarmUpResult> {\n  if (!ExponentWebBrowser.warmUpAsync) {\n    throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.warmUpAsync(browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * This method initiates (if needed) [CustomTabsSession](https://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html#maylaunchurl)\n * and calls its `mayLaunchUrl` method for browser specified by the package.\n *\n * @param url The url of page that is likely to be loaded first when opening browser.\n * @param browserPackage Package of browser to be informed. If not set, preferred\n * browser will be used.\n *\n * @return A promise which fulfils with `WebBrowserMayInitWithUrlResult` object.\n * @platform android\n */\nexport async function mayInitWithUrlAsync(\n  url: string,\n  browserPackage?: string\n): Promise<WebBrowserMayInitWithUrlResult> {\n  if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n    throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * This methods removes all bindings to services created by [`warmUpAsync`](#webbrowserwarmupasyncbrowserpackage)\n * or [`mayInitWithUrlAsync`](#webbrowsermayinitwithurlasyncurl-browserpackage). You should call\n * this method once you don't need them to avoid potential memory leaks. However, those binding\n * would be cleared once your application is destroyed, which might be sufficient in most cases.\n *\n * @param browserPackage Package of browser to be cooled. If not set, preferred browser will be used.\n *\n * @return The promise which fulfils with ` WebBrowserCoolDownResult` when cooling is performed, or\n * an empty object when there was no connection to be dismissed.\n * @platform android\n */\nexport async function coolDownAsync(browserPackage?: string): Promise<WebBrowserCoolDownResult> {\n  if (!ExponentWebBrowser.coolDownAsync) {\n    throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.coolDownAsync(browserPackage);\n  }\n}\n\nlet browserLocked = false;\n\n// @needsAudit\n/**\n * Opens the url with Safari in a modal on iOS using [`SFSafariViewController`](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller),\n * and Chrome in a new [custom tab](https://developer.chrome.com/multidevice/android/customtabs)\n * on Android. On iOS, the modal Safari will not share cookies with the system Safari. If you need\n * this, use [`openAuthSessionAsync`](#webbrowseropenauthsessionasyncurl-redirecturl-browserparams).\n *\n * @param url The url to open in the web browser.\n * @param browserParams A dictionary of key-value pairs.\n *\n * @return The promise behaves differently based on the platform.\n * On Android promise resolves with `{type: 'opened'}` if we were able to open browser.\n * On iOS:\n * - If the user closed the web browser, the Promise resolves with `{ type: 'cancel' }`.\n * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser), the Promise resolves with `{ type: 'dismiss' }`.\n */\nexport async function openBrowserAsync(\n  url: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  if (!ExponentWebBrowser.openBrowserAsync) {\n    throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n  }\n\n  if (browserLocked) {\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call WebBrowser.openBrowserAsync multiple times while already active. Only one WebBrowser controller can be active at any given time.'\n      );\n    }\n\n    return { type: WebBrowserResultType.LOCKED };\n  }\n  browserLocked = true;\n\n  let result: WebBrowserResult;\n  try {\n    result = await ExponentWebBrowser.openBrowserAsync(url, browserParams);\n  } finally {\n    // WebBrowser session complete, unset lock\n    browserLocked = false;\n  }\n\n  return result;\n}\n\n// @needsAudit\n/**\n * Dismisses the presented web browser.\n *\n * @return The `void` on successful attempt, or throws error, if dismiss functionality is not avaiable.\n * @platform ios\n */\nexport function dismissBrowser(): void {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  ExponentWebBrowser.dismissBrowser();\n}\n\n// @needsAudit\n/**\n * # On iOS:\n * Opens the url with Safari in a modal using `SFAuthenticationSession` on iOS 11 and greater,\n * and falling back on a `SFSafariViewController`. The user will be asked whether to allow the app\n * to authenticate using the given url.\n *\n * # On Android:\n * This will be done using a \"custom Chrome tabs\" browser, [AppState](../react-native/appstate/),\n * and [Linking](./linking/) APIs.\n *\n * # On web:\n * > This API can only be used in a secure environment (`https`). You can use expo `start:web --https`\n * to test this. Otherwise, an error with code [`ERR_WEB_BROWSER_CRYPTO`](#errwebbrowsercrypto) will be thrown.\n * This will use the browser's [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) API.\n * - _Desktop_: This will create a new web popup window in the browser that can be closed later using `WebBrowser.maybeCompleteAuthSession()`.\n * - _Mobile_: This will open a new tab in the browser which can be closed using `WebBrowser.maybeCompleteAuthSession()`.\n *\n * How this works on web:\n * - A crypto state will be created for verifying the redirect.\n *   - This means you need to run with `expo start:web --https`\n * - The state will be added to the window's `localstorage`. This ensures that auth cannot complete\n *   unless it's done from a page running with the same origin as it was started.\n *   Ex: if `openAuthSessionAsync` is invoked on `https://localhost:19006`, then `maybeCompleteAuthSession`\n *   must be invoked on a page hosted from the origin `https://localhost:19006`. Using a different\n *   website, or even a different host like `https://128.0.0.*:19006` for example will not work.\n * - A timer will be started to check for every 1000 milliseconds (1 second) to detect if the window\n *   has been closed by the user. If this happens then a promise will resolve with `{ type: 'dismiss' }`.\n *\n * > On mobile web, Chrome and Safari will block any call to [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n * which takes too long to fire after a user interaction. This method must be invoked immediately\n * after a user interaction. If the event is blocked, an error with code [`ERR_WEB_BROWSER_BLOCKED`](#errwebbrowserblocked) will be thrown.\n *\n * @param url The url to open in the web browser. This should be a login page.\n * @param redirectUrl _Optional_ - The url to deep link back into your app. By default, this will be [`Constants.linkingUrl`](./constants/#expoconstantslinkinguri).\n * @param options _Optional_ - An object extending the [`WebBrowserOpenOptions`](#webbrowseropenoptions).\n * If there is no native AuthSession implementation available (which is the case on Android)\n * these params will be used in the browser polyfill. If there is a native AuthSession implementation,\n * these params will be ignored.\n *\n * @return\n * - If the user does not permit the application to authenticate with the given url, the Promise fulfills with `{ type: 'cancel' }` object.\n * - If the user closed the web browser, the Promise fulfills with `{ type: 'cancel' }` object.\n * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser),\n * the Promise fulfills with `{ type: 'dismiss' }` object.\n */\nexport async function openAuthSessionAsync(\n  url: string,\n  redirectUrl: string,\n  options: AuthSessionOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.openAuthSessionAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n    }\n    if (['ios', 'web'].includes(Platform.OS)) {\n      return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl, options);\n    }\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl, options);\n  }\n}\n\n// @docsMissing\nexport function dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n// @needsAudit\n/**\n * Possibly completes an authentication session on web in a window popup. The method\n * should be invoked on the page that the window redirects to.\n *\n * @param options\n *\n * @return Returns an object with message about why the redirect failed or succeeded:\n *\n * If `type` is set to `failed`, the reason depends on the message:\n * - `Not supported on this platform`: If the platform doesn't support this method (iOS, Android).\n * - `Cannot use expo-web-browser in a non-browser environment`: If the code was executed in an SSR\n *   or node environment.\n * - `No auth session is currently in progress`: (the cached state wasn't found in local storage).\n *   This can happen if the window redirects to an origin (website) that is different to the initial\n *   website origin. If this happens in development, it may be because the auth started on localhost\n *   and finished on your computer port (Ex: `128.0.0.*`). This is controlled by the `redirectUrl`\n *   and `returnUrl`.\n * - `Current URL \"<URL>\" and original redirect URL \"<URL>\" do not match`: This can occur when the\n *   redirect URL doesn't match what was initial defined as the `returnUrl`. You can skip this test\n *   in development by passing `{ skipRedirectCheck: true }` to the function.\n *\n * If `type` is set to `success`, the parent window will attempt to close the child window immediately.\n *\n * If the error `ERR_WEB_BROWSER_REDIRECT` was thrown, it may mean that the parent window was\n * reloaded before the auth was completed. In this case you'll need to close the child window manually.\n *\n * @platform web\n */\nexport function maybeCompleteAuthSession(\n  options: WebBrowserCompleteAuthSessionOptions = {}\n): WebBrowserCompleteAuthSessionResult {\n  if (ExponentWebBrowser.maybeCompleteAuthSession) {\n    return ExponentWebBrowser.maybeCompleteAuthSession(options);\n  }\n  return { type: 'failed', message: 'Not supported on this platform' };\n}\n\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported(): boolean {\n  if (Platform.OS === 'android') {\n    return false;\n  } else if (Platform.OS === 'web') {\n    return true;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectHandler: ((event: RedirectEvent) => void) | null = null;\n\n/*\n * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n * it with AppState\n */\n\n// Store the `resolve` function from a Promise to fire when the AppState\n// returns to active\nlet _onWebBrowserCloseAndroid: null | (() => void) = null;\n\n// If the initial AppState.currentState is null, we assume that the first call to\n// AppState#change event is not actually triggered by a real change,\n// is triggered instead by the bridge capturing the current state\n// (https://reactnative.dev/docs/appstate#basic-usage)\nlet _isAppStateAvailable: boolean = AppState.currentState !== null;\nfunction _onAppStateChangeAndroid(state: AppStateStatus) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nasync function _openBrowserAndWaitAndroidAsync(\n  startUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  const appStateChangedToActive = new Promise<void>((resolve) => {\n    _onWebBrowserCloseAndroid = resolve;\n  });\n  const stateChangeSubscription = AppState.addEventListener('change', _onAppStateChangeAndroid);\n\n  let result: WebBrowserResult = { type: WebBrowserResultType.CANCEL };\n  let type: string | null = null;\n\n  try {\n    ({ type } = await openBrowserAsync(startUrl, browserParams));\n  } catch (e) {\n    stateChangeSubscription.remove();\n    _onWebBrowserCloseAndroid = null;\n    throw e;\n  }\n\n  if (type === 'opened') {\n    await appStateChangedToActive;\n    result = { type: WebBrowserResultType.DISMISS };\n  }\n\n  stateChangeSubscription.remove();\n  _onWebBrowserCloseAndroid = null;\n  return result;\n}\n\nasync function _openAuthSessionPolyfillAsync(\n  startUrl: string,\n  returnUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_redirectHandler) {\n    throw new Error(\n      `The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`\n    );\n  }\n\n  if (_onWebBrowserCloseAndroid) {\n    throw new Error(`WebBrowser is already open, only one can be open at a time`);\n  }\n\n  try {\n    if (Platform.OS === 'android') {\n      return await Promise.race([\n        _openBrowserAndWaitAndroidAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    } else {\n      return await Promise.race([\n        openBrowserAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    }\n  } finally {\n    // We can't dismiss the browser on Android, only call this when it's available.\n    // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n    if (ExponentWebBrowser.dismissBrowser) {\n      ExponentWebBrowser.dismissBrowser();\n    }\n\n    _stopWaitingForRedirect();\n  }\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\n      `The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`\n    );\n  }\n\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\n\nfunction _waitForRedirectAsync(returnUrl: string): Promise<WebBrowserRedirectResult> {\n  return new Promise((resolve) => {\n    _redirectHandler = (event: RedirectEvent) => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}