{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Crypto from 'expo-crypto';\nimport * as Random from 'expo-random';\nimport invariant from 'invariant';\nvar CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nfunction getRandomValues(input) {\n  var output = input;\n  if (input.byteLength !== input.length) input = new Uint8Array(input.buffer);\n  var bytes = Random.getRandomBytes(input.length);\n  for (var i = 0; i < bytes.length; i++) input[i] = bytes[i];\n  return output;\n}\nfunction convertBufferToString(buffer) {\n  var state = [];\n  for (var i = 0; i < buffer.byteLength; i += 1) {\n    var index = buffer[i] % CHARSET.length;\n    state.push(CHARSET[index]);\n  }\n  return state.join('');\n}\nfunction convertToUrlSafeString(b64) {\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\nexport function generateRandom(size) {\n  var buffer = new Uint8Array(size);\n  getRandomValues(buffer);\n  return convertBufferToString(buffer);\n}\nexport function deriveChallengeAsync(code) {\n  var buffer;\n  return _regeneratorRuntime.async(function deriveChallengeAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        invariant(code.length > 42 && code.length < 129, 'Invalid code length for PKCE.');\n        _context.next = 3;\n        return _regeneratorRuntime.awrap(Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, code, {\n          encoding: Crypto.CryptoEncoding.BASE64\n        }));\n      case 3:\n        buffer = _context.sent;\n        return _context.abrupt(\"return\", convertToUrlSafeString(buffer));\n      case 5:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function buildCodeAsync() {\n  var size,\n    codeVerifier,\n    codeChallenge,\n    _args2 = arguments;\n  return _regeneratorRuntime.async(function buildCodeAsync$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        size = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : 128;\n        codeVerifier = generateRandom(size);\n        _context2.next = 4;\n        return _regeneratorRuntime.awrap(deriveChallengeAsync(codeVerifier));\n      case 4:\n        codeChallenge = _context2.sent;\n        return _context2.abrupt(\"return\", {\n          codeVerifier: codeVerifier,\n          codeChallenge: codeChallenge\n        });\n      case 6:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function generateHexStringAsync(size) {\n  var value, buffer;\n  return _regeneratorRuntime.async(function generateHexStringAsync$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        value = generateRandom(size);\n        _context3.next = 3;\n        return _regeneratorRuntime.awrap(Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, value, {\n          encoding: Crypto.CryptoEncoding.HEX\n        }));\n      case 3:\n        buffer = _context3.sent;\n        return _context3.abrupt(\"return\", convertToUrlSafeString(buffer));\n      case 5:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["Crypto","Random","invariant","CHARSET","getRandomValues","input","output","byteLength","length","Uint8Array","buffer","bytes","getRandomBytes","i","convertBufferToString","state","index","push","join","convertToUrlSafeString","b64","replace","generateRandom","size","deriveChallengeAsync","code","_regeneratorRuntime","async","deriveChallengeAsync$","_context","prev","next","awrap","digestStringAsync","CryptoDigestAlgorithm","SHA256","encoding","CryptoEncoding","BASE64","sent","abrupt","stop","Promise","buildCodeAsync","codeVerifier","codeChallenge","_args2","arguments","buildCodeAsync$","_context2","undefined","generateHexStringAsync","value","generateHexStringAsync$","_context3","HEX"],"sources":["/Users/fael_st/www/react-native/stream-app/node_modules/expo-auth-session/src/PKCE.ts"],"sourcesContent":["import * as Crypto from 'expo-crypto';\nimport * as Random from 'expo-random';\nimport invariant from 'invariant';\n\nconst CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\nfunction getRandomValues(input: Uint8Array): Uint8Array {\n  const output = input;\n  // Get access to the underlying raw bytes\n  if (input.byteLength !== input.length) input = new Uint8Array(input.buffer);\n\n  const bytes = Random.getRandomBytes(input.length);\n\n  for (let i = 0; i < bytes.length; i++) input[i] = bytes[i];\n\n  return output;\n}\n\nfunction convertBufferToString(buffer: Uint8Array): string {\n  const state: string[] = [];\n  for (let i = 0; i < buffer.byteLength; i += 1) {\n    const index = buffer[i] % CHARSET.length;\n    state.push(CHARSET[index]);\n  }\n  return state.join('');\n}\n\nfunction convertToUrlSafeString(b64: string): string {\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nexport function generateRandom(size: number): string {\n  const buffer = new Uint8Array(size);\n  getRandomValues(buffer);\n  return convertBufferToString(buffer);\n}\n\n/**\n * Proof key for Code Exchange by OAuth Public Clients (RFC 7636), Section 4.1\n * [Section 4.1](https://tools.ietf.org/html/rfc7636#section-4.1)\n */\nexport async function deriveChallengeAsync(code: string): Promise<string> {\n  // 43 is the minimum, and 128 is the maximum.\n  invariant(code.length > 42 && code.length < 129, 'Invalid code length for PKCE.');\n\n  const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, code, {\n    encoding: Crypto.CryptoEncoding.BASE64,\n  });\n  return convertToUrlSafeString(buffer);\n}\n\nexport async function buildCodeAsync(\n  size: number = 128\n): Promise<{ codeChallenge: string; codeVerifier: string }> {\n  // This method needs to be resolved like all other native methods.\n  const codeVerifier = generateRandom(size);\n  const codeChallenge = await deriveChallengeAsync(codeVerifier);\n\n  return { codeVerifier, codeChallenge };\n}\n\n/**\n * Digest a random string with hex encoding, useful for creating `nonce`s.\n */\nexport async function generateHexStringAsync(size: number): Promise<string> {\n  const value = generateRandom(size);\n  const buffer = await Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, value, {\n    encoding: Crypto.CryptoEncoding.HEX,\n  });\n  return convertToUrlSafeString(buffer);\n}\n"],"mappings":";AAAA,OAAO,KAAKA,MAAM,MAAM,aAAa;AACrC,OAAO,KAAKC,MAAM,MAAM,aAAa;AACrC,OAAOC,SAAS,MAAM,WAAW;AAEjC,IAAMC,OAAO,GAAG,gEAAgE;AAEhF,SAASC,eAAeA,CAACC,KAAiB;EACxC,IAAMC,MAAM,GAAGD,KAAK;EAEpB,IAAIA,KAAK,CAACE,UAAU,KAAKF,KAAK,CAACG,MAAM,EAAEH,KAAK,GAAG,IAAII,UAAU,CAACJ,KAAK,CAACK,MAAM,CAAC;EAE3E,IAAMC,KAAK,GAAGV,MAAM,CAACW,cAAc,CAACP,KAAK,CAACG,MAAM,CAAC;EAEjD,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACH,MAAM,EAAEK,CAAC,EAAE,EAAER,KAAK,CAACQ,CAAC,CAAC,GAAGF,KAAK,CAACE,CAAC,CAAC;EAE1D,OAAOP,MAAM;AACf;AAEA,SAASQ,qBAAqBA,CAACJ,MAAkB;EAC/C,IAAMK,KAAK,GAAa,EAAE;EAC1B,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACH,UAAU,EAAEM,CAAC,IAAI,CAAC,EAAE;IAC7C,IAAMG,KAAK,GAAGN,MAAM,CAACG,CAAC,CAAC,GAAGV,OAAO,CAACK,MAAM;IACxCO,KAAK,CAACE,IAAI,CAACd,OAAO,CAACa,KAAK,CAAC,CAAC;;EAE5B,OAAOD,KAAK,CAACG,IAAI,CAAC,EAAE,CAAC;AACvB;AAEA,SAASC,sBAAsBA,CAACC,GAAW;EACzC,OAAOA,GAAG,CAACC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;AACtE;AAEA,OAAM,SAAUC,cAAcA,CAACC,IAAY;EACzC,IAAMb,MAAM,GAAG,IAAID,UAAU,CAACc,IAAI,CAAC;EACnCnB,eAAe,CAACM,MAAM,CAAC;EACvB,OAAOI,qBAAqB,CAACJ,MAAM,CAAC;AACtC;AAMA,OAAO,SAAec,oBAAoBA,CAACC,IAAY;EAAA,IAAAf,MAAA;EAAA,OAAAgB,mBAAA,CAAAC,KAAA,UAAAC,sBAAAC,QAAA;IAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;MAAA;QAErD7B,SAAS,CAACuB,IAAI,CAACjB,MAAM,GAAG,EAAE,IAAIiB,IAAI,CAACjB,MAAM,GAAG,GAAG,EAAE,+BAA+B,CAAC;QAACqB,QAAA,CAAAE,IAAA;QAAA,OAAAL,mBAAA,CAAAM,KAAA,CAE7DhC,MAAM,CAACiC,iBAAiB,CAACjC,MAAM,CAACkC,qBAAqB,CAACC,MAAM,EAAEV,IAAI,EAAE;UACvFW,QAAQ,EAAEpC,MAAM,CAACqC,cAAc,CAACC;SACjC,CAAC;MAAA;QAFI5B,MAAM,GAAAmB,QAAA,CAAAU,IAAA;QAAA,OAAAV,QAAA,CAAAW,MAAA,WAGLrB,sBAAsB,CAACT,MAAM,CAAC;MAAA;MAAA;QAAA,OAAAmB,QAAA,CAAAY,IAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA;AAGvC,OAAO,SAAeC,cAAcA,CAAA;EAAA,IAAApB,IAAA;IAAAqB,YAAA;IAAAC,aAAA;IAAAC,MAAA,GAAAC,SAAA;EAAA,OAAArB,mBAAA,CAAAC,KAAA,UAAAqB,gBAAAC,SAAA;IAAA,kBAAAA,SAAA,CAAAnB,IAAA,GAAAmB,SAAA,CAAAlB,IAAA;MAAA;QAClCR,IAAA,GAAAuB,MAAA,CAAAtC,MAAA,QAAAsC,MAAA,QAAAI,SAAA,GAAAJ,MAAA,MAAe,GAAG;QAGZF,YAAY,GAAGtB,cAAc,CAACC,IAAI,CAAC;QAAA0B,SAAA,CAAAlB,IAAA;QAAA,OAAAL,mBAAA,CAAAM,KAAA,CACbR,oBAAoB,CAACoB,YAAY,CAAC;MAAA;QAAxDC,aAAa,GAAAI,SAAA,CAAAV,IAAA;QAAA,OAAAU,SAAA,CAAAT,MAAA,WAEZ;UAAEI,YAAY,EAAZA,YAAY;UAAEC,aAAa,EAAbA;QAAa,CAAE;MAAA;MAAA;QAAA,OAAAI,SAAA,CAAAR,IAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA;AAMxC,OAAO,SAAeS,sBAAsBA,CAAC5B,IAAY;EAAA,IAAA6B,KAAA,EAAA1C,MAAA;EAAA,OAAAgB,mBAAA,CAAAC,KAAA,UAAA0B,wBAAAC,SAAA;IAAA,kBAAAA,SAAA,CAAAxB,IAAA,GAAAwB,SAAA,CAAAvB,IAAA;MAAA;QACjDqB,KAAK,GAAG9B,cAAc,CAACC,IAAI,CAAC;QAAA+B,SAAA,CAAAvB,IAAA;QAAA,OAAAL,mBAAA,CAAAM,KAAA,CACbhC,MAAM,CAACiC,iBAAiB,CAACjC,MAAM,CAACkC,qBAAqB,CAACC,MAAM,EAAEiB,KAAK,EAAE;UACxFhB,QAAQ,EAAEpC,MAAM,CAACqC,cAAc,CAACkB;SACjC,CAAC;MAAA;QAFI7C,MAAM,GAAA4C,SAAA,CAAAf,IAAA;QAAA,OAAAe,SAAA,CAAAd,MAAA,WAGLrB,sBAAsB,CAACT,MAAM,CAAC;MAAA;MAAA;QAAA,OAAA4C,SAAA,CAAAb,IAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}