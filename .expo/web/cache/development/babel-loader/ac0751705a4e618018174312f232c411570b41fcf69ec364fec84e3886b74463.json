{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { makeRedirectUri } from 'expo-auth-session';\nimport React, { useEffect, createContext, useContext, useState } from 'react';\nimport { generateRandom } from 'expo-auth-session/build/PKCE';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar AuthContext = createContext({});\nvar twitchEndpoints = {\n  authorization: 'https://id.twitch.tv/oauth2/authorize',\n  revocation: 'https://id.twitch.tv/oauth2/revoke'\n};\nfunction AuthProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoggingOut = _useState2[0],\n    setIsLoggingOut = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoggingIn = _useState4[0],\n    setIsLoggingIn = _useState4[1];\n  var _useState5 = useState({}),\n    _useState6 = _slicedToArray(_useState5, 2),\n    user = _useState6[0],\n    setUser = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    userToken = _useState8[0],\n    setUserToken = _useState8[1];\n  function signIn() {\n    var CLIENT_ID, REDIRECT_URI, RESPONSE_TYPE, SCOPE, FORCE_VERIFY, STATE, authUrl;\n    return _regeneratorRuntime.async(function signIn$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          setIsLoggingIn(true);\n          CLIENT_ID = 'tw7mv3ss2dedn8gz5j2fnj4venfqe9';\n          REDIRECT_URI = makeRedirectUri({});\n          RESPONSE_TYPE = 'token';\n          SCOPE = 'user:read:email:follows';\n          FORCE_VERIFY = true;\n          STATE = generateRandom(30);\n          authUrl = twitchEndpoints.authorization + (\"?client_id=\" + CLIENT_ID) + (\"&redirect_uri=\" + REDIRECT_URI) + (\"&response_type=\" + RESPONSE_TYPE) + (\"&scope=\" + SCOPE) + (\"&force_verify=\" + FORCE_VERIFY) + (\"&state=\" + STATE);\n          _context.next = 14;\n          break;\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          throw _context.t0;\n        case 14:\n          _context.prev = 14;\n          setIsLoggingIn(false);\n          return _context.finish(14);\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }, null, null, [[0, 11, 14, 17]], Promise);\n  }\n  function signOut() {\n    return _regeneratorRuntime.async(function signOut$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          try {} catch (error) {} finally {}\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, null, null, null, Promise);\n  }\n  useEffect(function () {}, []);\n  return _jsx(AuthContext.Provider, {\n    value: {\n      user: user,\n      isLoggingOut: isLoggingOut,\n      isLoggingIn: isLoggingIn,\n      signIn: signIn,\n      signOut: signOut\n    },\n    children: children\n  });\n}\nfunction useAuth() {\n  var context = useContext(AuthContext);\n  return context;\n}\nexport { AuthProvider, useAuth };","map":{"version":3,"names":["makeRedirectUri","React","useEffect","createContext","useContext","useState","generateRandom","jsx","_jsx","AuthContext","twitchEndpoints","authorization","revocation","AuthProvider","_ref","children","_useState","_useState2","_slicedToArray","isLoggingOut","setIsLoggingOut","_useState3","_useState4","isLoggingIn","setIsLoggingIn","_useState5","_useState6","user","setUser","_useState7","_useState8","userToken","setUserToken","signIn","CLIENT_ID","REDIRECT_URI","RESPONSE_TYPE","SCOPE","FORCE_VERIFY","STATE","authUrl","_regeneratorRuntime","async","signIn$","_context","prev","next","t0","finish","stop","Promise","signOut","signOut$","_context2","error","Provider","value","useAuth","context"],"sources":["/Users/fael_st/www/react-native/stream-app/src/hooks/useAuth.tsx"],"sourcesContent":["import { makeRedirectUri, revokeAsync, startAsync } from 'expo-auth-session';\nimport React, {\n  useEffect,\n  createContext,\n  useContext,\n  useState,\n  ReactNode,\n} from 'react';\nimport { generateRandom } from 'expo-auth-session/build/PKCE';\n\nimport { api } from '../services/api';\n\ninterface User {\n  id: number;\n  display_name: string;\n  email: string;\n  profile_image_url: string;\n}\n\ninterface AuthContextData {\n  user: User;\n  isLoggingOut: boolean;\n  isLoggingIn: boolean;\n  signIn: () => Promise<void>;\n  signOut: () => Promise<void>;\n}\n\ninterface AuthProviderData {\n  children: ReactNode;\n}\n\nconst AuthContext = createContext({} as AuthContextData);\n\nconst twitchEndpoints = {\n  authorization: 'https://id.twitch.tv/oauth2/authorize',\n  revocation: 'https://id.twitch.tv/oauth2/revoke',\n};\n\nfunction AuthProvider({ children }: AuthProviderData) {\n  const [isLoggingOut, setIsLoggingOut] = useState(false);\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [user, setUser] = useState({} as User);\n  const [userToken, setUserToken] = useState('');\n\n  // get CLIENT_ID from environment variables\n\n  async function signIn() {\n    try {\n      setIsLoggingIn(true);\n\n      const CLIENT_ID = 'tw7mv3ss2dedn8gz5j2fnj4venfqe9';\n      const REDIRECT_URI = makeRedirectUri({})\n      const RESPONSE_TYPE = 'token';\n      const SCOPE = 'user:read:email:follows';\n      const FORCE_VERIFY = true;\n      const STATE = generateRandom(30);\n\n      const authUrl =\n        twitchEndpoints.authorization +\n        `?client_id=${CLIENT_ID}` +\n        `&redirect_uri=${REDIRECT_URI}` +\n        `&response_type=${RESPONSE_TYPE}` +\n        `&scope=${SCOPE}` +\n        `&force_verify=${FORCE_VERIFY}` +\n        `&state=${STATE}`;\n\n      // REDIRECT_URI - create OAuth redirect URI using makeRedirectUri() with \"useProxy\" option set to true\n      // RESPONSE_TYPE - set to \"token\"\n      // SCOPE - create a space-separated list of the following scopes: \"openid\", \"user:read:email\" and \"user:read:follows\"\n      // FORCE_VERIFY - set to true\n      // STATE - generate random 30-length string using generateRandom() with \"size\" set to 30\n\n      // assemble authUrl with twitchEndpoint authorization, client_id,\n      // redirect_uri, response_type, scope, force_verify and state\n\n      // call startAsync with authUrl\n\n      // verify if startAsync response.type equals \"success\" and response.params.error differs from \"access_denied\"\n      // if true, do the following:\n\n      // verify if startAsync response.params.state differs from STATE\n      // if true, do the following:\n      // throw an error with message \"Invalid state value\"\n\n      // add access_token to request's authorization header\n\n      // call Twitch API's users route\n\n      // set user state with response from Twitch API's route \"/users\"\n      // set userToken state with response's access_token from startAsync\n    } catch (error) {\n      throw error;\n    } finally {\n      setIsLoggingIn(false);\n    }\n  }\n\n  async function signOut() {\n    try {\n      // set isLoggingOut to true\n      // call revokeAsync with access_token, client_id and twitchEndpoint revocation\n    } catch (error) {\n    } finally {\n      // set user state to an empty User object\n      // set userToken state to an empty string\n      // remove \"access_token\" from request's authorization header\n      // set isLoggingOut to false\n    }\n  }\n\n  useEffect(() => {\n    // add client_id to request's \"Client-Id\" header\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{ user, isLoggingOut, isLoggingIn, signIn, signOut }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nfunction useAuth() {\n  const context = useContext(AuthContext);\n\n  return context;\n}\n\nexport { AuthProvider, useAuth };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}