{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _excluded = [\"url\", \"proxyOptions\"],\n  _excluded2 = [\"useProxy\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { CodeChallengeMethod, ResponseType } from \"./AuthRequest.types\";\nimport { AuthError } from \"./Errors\";\nimport * as PKCE from \"./PKCE\";\nimport * as QueryParams from \"./QueryParams\";\nimport sessionUrlProvider from \"./SessionUrlProvider\";\nimport { TokenResponse } from \"./TokenRequest\";\nvar _authLock = false;\nexport var AuthRequest = function () {\n  function AuthRequest(request) {\n    var _request$responseType, _request$state, _request$extraParams, _request$codeChalleng, _request$usePKCE;\n    _classCallCheck(this, AuthRequest);\n    this.url = null;\n    this.responseType = (_request$responseType = request.responseType) != null ? _request$responseType : ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = (_request$state = request.state) != null ? _request$state : PKCE.generateRandom(10);\n    this.extraParams = (_request$extraParams = request.extraParams) != null ? _request$extraParams : {};\n    this.codeChallengeMethod = (_request$codeChalleng = request.codeChallengeMethod) != null ? _request$codeChalleng : CodeChallengeMethod.S256;\n    this.usePKCE = (_request$usePKCE = request.usePKCE) != null ? _request$usePKCE : true;\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(\"`AuthRequest` `extraParams.prompt` will be overwritten by `prompt`.\");\n      }\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(\"`AuthRequest` `extraParams.client_secret` will be overwritten by `clientSecret`.\");\n      }\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(\"`AuthRequest` `extraParams.code_challenge_method` will be overwritten by `codeChallengeMethod`.\");\n      }\n    }\n    invariant(this.codeChallengeMethod !== CodeChallengeMethod.Plain, \"`AuthRequest` does not support `CodeChallengeMethod.Plain` as it's not secure.\");\n    invariant(this.redirectUri, \"`AuthRequest` requires a valid `redirectUri`. Ex: \" + Platform.select({\n      web: 'https://yourwebsite.com/',\n      default: 'com.your.app:/oauthredirect'\n    }));\n  }\n  _createClass(AuthRequest, [{\n    key: \"getAuthRequestConfigAsync\",\n    value: function getAuthRequestConfigAsync() {\n      return _regeneratorRuntime.async(function getAuthRequestConfigAsync$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!this.usePKCE) {\n              _context.next = 3;\n              break;\n            }\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(this.ensureCodeIsSetupAsync());\n          case 3:\n            return _context.abrupt(\"return\", {\n              responseType: this.responseType,\n              clientId: this.clientId,\n              redirectUri: this.redirectUri,\n              scopes: this.scopes,\n              clientSecret: this.clientSecret,\n              codeChallenge: this.codeChallenge,\n              codeChallengeMethod: this.codeChallengeMethod,\n              prompt: this.prompt,\n              state: this.state,\n              extraParams: this.extraParams,\n              usePKCE: this.usePKCE\n            });\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"promptAsync\",\n    value: function promptAsync(discovery) {\n      var _ref,\n        url,\n        proxyOptions,\n        options,\n        startUrl,\n        returnUrl,\n        result,\n        useProxy,\n        openOptions,\n        _args2 = arguments;\n      return _regeneratorRuntime.async(function promptAsync$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            url = _ref.url, proxyOptions = _ref.proxyOptions, options = _objectWithoutProperties(_ref, _excluded);\n            if (url) {\n              _context2.next = 16;\n              break;\n            }\n            if (this.url) {\n              _context2.next = 15;\n              break;\n            }\n            _context2.t0 = this;\n            _context2.t1 = discovery;\n            _context2.t2 = _objectSpread;\n            _context2.t3 = _objectSpread({}, options);\n            _context2.t4 = {};\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(this.makeAuthUrlAsync(discovery));\n          case 11:\n            _context2.t5 = _context2.sent;\n            _context2.t6 = {\n              url: _context2.t5\n            };\n            _context2.t7 = (0, _context2.t2)(_context2.t3, _context2.t4, _context2.t6);\n            return _context2.abrupt(\"return\", _context2.t0.promptAsync.call(_context2.t0, _context2.t1, _context2.t7));\n          case 15:\n            url = this.url;\n          case 16:\n            invariant(url, 'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n            startUrl = url;\n            returnUrl = this.redirectUri;\n            if (options.useProxy) {\n              returnUrl = sessionUrlProvider.getDefaultReturnUrl(proxyOptions == null ? void 0 : proxyOptions.path, proxyOptions);\n              startUrl = sessionUrlProvider.getStartUrl(url, returnUrl, options.projectNameForProxy);\n            }\n            if (!_authLock) {\n              _context2.next = 23;\n              break;\n            }\n            if (__DEV__) {\n              console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n            }\n            return _context2.abrupt(\"return\", {\n              type: 'locked'\n            });\n          case 23:\n            _authLock = true;\n            _context2.prev = 24;\n            useProxy = options.useProxy, openOptions = _objectWithoutProperties(options, _excluded2);\n            _context2.next = 28;\n            return _regeneratorRuntime.awrap(WebBrowser.openAuthSessionAsync(startUrl, returnUrl, openOptions));\n          case 28:\n            result = _context2.sent;\n          case 29:\n            _context2.prev = 29;\n            _authLock = false;\n            return _context2.finish(29);\n          case 32:\n            if (!(result.type === 'opened')) {\n              _context2.next = 34;\n              break;\n            }\n            throw new Error('An unexpected error occurred');\n          case 34:\n            if (!(result.type !== 'success')) {\n              _context2.next = 36;\n              break;\n            }\n            return _context2.abrupt(\"return\", {\n              type: result.type\n            });\n          case 36:\n            return _context2.abrupt(\"return\", this.parseReturnUrl(result.url));\n          case 37:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, null, this, [[24,, 29, 32]], Promise);\n    }\n  }, {\n    key: \"parseReturnUrl\",\n    value: function parseReturnUrl(url) {\n      var _QueryParams$getQuery = QueryParams.getQueryParams(url),\n        params = _QueryParams$getQuery.params,\n        errorCode = _QueryParams$getQuery.errorCode;\n      var state = params.state,\n        _params$error = params.error,\n        error = _params$error === void 0 ? errorCode : _params$error;\n      var parsedError = null;\n      var authentication = null;\n      if (state !== this.state) {\n        parsedError = new AuthError({\n          error: 'state_mismatch',\n          error_description: 'Cross-Site request verification failed. Cached state and returned state do not match.'\n        });\n      } else if (error) {\n        parsedError = new AuthError(_objectSpread({\n          error: error\n        }, params));\n      }\n      if (params.access_token) {\n        authentication = TokenResponse.fromQueryParams(params);\n      }\n      return {\n        type: parsedError ? 'error' : 'success',\n        error: parsedError,\n        url: url,\n        params: params,\n        authentication: authentication,\n        errorCode: errorCode\n      };\n    }\n  }, {\n    key: \"makeAuthUrlAsync\",\n    value: function makeAuthUrlAsync(discovery) {\n      var _request$scopes;\n      var request, params, extra, query;\n      return _regeneratorRuntime.async(function makeAuthUrlAsync$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(this.getAuthRequestConfigAsync());\n          case 2:\n            request = _context3.sent;\n            if (request.state) {\n              _context3.next = 5;\n              break;\n            }\n            throw new Error('Cannot make request URL without a valid `state` loaded');\n          case 5:\n            params = {};\n            if (request.codeChallenge) {\n              params.code_challenge = request.codeChallenge;\n            }\n            for (extra in request.extraParams) {\n              if (extra in request.extraParams) {\n                params[extra] = request.extraParams[extra];\n              }\n            }\n            if (request.usePKCE && request.codeChallengeMethod) {\n              params.code_challenge_method = request.codeChallengeMethod;\n            }\n            if (request.clientSecret) {\n              params.client_secret = request.clientSecret;\n            }\n            if (request.prompt) {\n              params.prompt = request.prompt;\n            }\n            params.redirect_uri = request.redirectUri;\n            params.client_id = request.clientId;\n            params.response_type = request.responseType;\n            params.state = request.state;\n            if ((_request$scopes = request.scopes) != null && _request$scopes.length) {\n              params.scope = request.scopes.join(' ');\n            }\n            query = QueryParams.buildQueryString(params);\n            this.url = discovery.authorizationEndpoint + \"?\" + query;\n            return _context3.abrupt(\"return\", this.url);\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"ensureCodeIsSetupAsync\",\n    value: function ensureCodeIsSetupAsync() {\n      var _await$PKCE$buildCode, codeVerifier, codeChallenge;\n      return _regeneratorRuntime.async(function ensureCodeIsSetupAsync$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!this.codeVerifier) {\n              _context4.next = 2;\n              break;\n            }\n            return _context4.abrupt(\"return\");\n          case 2:\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(PKCE.buildCodeAsync());\n          case 4:\n            _await$PKCE$buildCode = _context4.sent;\n            codeVerifier = _await$PKCE$buildCode.codeVerifier;\n            codeChallenge = _await$PKCE$buildCode.codeChallenge;\n            this.codeVerifier = codeVerifier;\n            this.codeChallenge = codeChallenge;\n          case 9:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n  return AuthRequest;\n}();","map":{"version":3,"names":["WebBrowser","invariant","Platform","CodeChallengeMethod","ResponseType","AuthError","PKCE","QueryParams","sessionUrlProvider","TokenResponse","_authLock","AuthRequest","request","_request$responseType","_request$state","_request$extraParams","_request$codeChalleng","_request$usePKCE","_classCallCheck","url","responseType","Code","clientId","redirectUri","scopes","clientSecret","prompt","state","generateRandom","extraParams","codeChallengeMethod","S256","usePKCE","__DEV__","console","warn","client_secret","code_challenge_method","Plain","select","web","default","_createClass","key","value","getAuthRequestConfigAsync","_regeneratorRuntime","async","getAuthRequestConfigAsync$","_context","prev","next","awrap","ensureCodeIsSetupAsync","abrupt","codeChallenge","stop","Promise","promptAsync","discovery","_ref","proxyOptions","options","startUrl","returnUrl","result","useProxy","openOptions","_args2","arguments","promptAsync$","_context2","length","undefined","_objectWithoutProperties","_excluded","t0","t1","t2","_objectSpread","t3","t4","makeAuthUrlAsync","t5","sent","t6","t7","call","getDefaultReturnUrl","path","getStartUrl","projectNameForProxy","type","_excluded2","openAuthSessionAsync","finish","Error","parseReturnUrl","_QueryParams$getQuery","getQueryParams","params","errorCode","_params$error","error","parsedError","authentication","error_description","access_token","fromQueryParams","_request$scopes","extra","query","makeAuthUrlAsync$","_context3","code_challenge","redirect_uri","client_id","response_type","scope","join","buildQueryString","authorizationEndpoint","_await$PKCE$buildCode","codeVerifier","ensureCodeIsSetupAsync$","_context4","buildCodeAsync"],"sources":["/Users/fael_st/www/react-native/stream-app/node_modules/expo-auth-session/src/AuthRequest.ts"],"sourcesContent":["import * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport { Platform } from 'react-native';\n\nimport {\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  ResponseType,\n  Prompt,\n} from './AuthRequest.types';\nimport { AuthSessionResult } from './AuthSession.types';\nimport { DiscoveryDocument } from './Discovery';\nimport { AuthError } from './Errors';\nimport * as PKCE from './PKCE';\nimport * as QueryParams from './QueryParams';\nimport sessionUrlProvider from './SessionUrlProvider';\nimport { TokenResponse } from './TokenRequest';\n\nlet _authLock: boolean = false;\n\ntype AuthDiscoveryDocument = Pick<DiscoveryDocument, 'authorizationEndpoint'>;\n\n// @needsAudit @docsMissing\n/**\n * Used to manage an authorization request according to the OAuth spec: [Section 4.1.1][https://tools.ietf.org/html/rfc6749#section-4.1.1].\n * You can use this class directly for more info around the authorization.\n *\n * **Common use-cases:**\n *\n * - Parse a URL returned from the authorization server with `parseReturnUrlAsync()`.\n * - Get the built authorization URL with `makeAuthUrlAsync()`.\n * - Get a loaded JSON representation of the auth request with crypto state loaded with `getAuthRequestConfigAsync()`.\n *\n * @example\n * ```ts\n * // Create a request.\n * const request = new AuthRequest({ ... });\n *\n * // Prompt for an auth code\n * const result = await request.promptAsync(discovery, { useProxy: true });\n *\n * // Get the URL to invoke\n * const url = await request.makeAuthUrlAsync(discovery);\n *\n * // Get the URL to invoke\n * const parsed = await request.parseReturnUrlAsync(\"<URL From Server>\");\n * ```\n */\nexport class AuthRequest implements Omit<AuthRequestConfig, 'state'> {\n  /**\n   * Used for protection against [Cross-Site Request Forgery](https://tools.ietf.org/html/rfc6749#section-10.12).\n   */\n  public state: string;\n  public url: string | null = null;\n  public codeVerifier?: string;\n  public codeChallenge?: string;\n\n  readonly responseType: ResponseType | string;\n  readonly clientId: string;\n  readonly extraParams: Record<string, string>;\n  readonly usePKCE?: boolean;\n  readonly codeChallengeMethod: CodeChallengeMethod;\n  readonly redirectUri: string;\n  readonly scopes?: string[];\n  readonly clientSecret?: string;\n  readonly prompt?: Prompt;\n\n  constructor(request: AuthRequestConfig) {\n    this.responseType = request.responseType ?? ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = request.state ?? PKCE.generateRandom(10);\n    this.extraParams = request.extraParams ?? {};\n    this.codeChallengeMethod = request.codeChallengeMethod ?? CodeChallengeMethod.S256;\n    // PKCE defaults to true\n    this.usePKCE = request.usePKCE ?? true;\n\n    // Some warnings in development about potential confusing application code\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(`\\`AuthRequest\\` \\`extraParams.prompt\\` will be overwritten by \\`prompt\\`.`);\n      }\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.client_secret\\` will be overwritten by \\`clientSecret\\`.`\n        );\n      }\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.code_challenge_method\\` will be overwritten by \\`codeChallengeMethod\\`.`\n        );\n      }\n    }\n\n    invariant(\n      this.codeChallengeMethod !== CodeChallengeMethod.Plain,\n      `\\`AuthRequest\\` does not support \\`CodeChallengeMethod.Plain\\` as it's not secure.`\n    );\n    invariant(\n      this.redirectUri,\n      `\\`AuthRequest\\` requires a valid \\`redirectUri\\`. Ex: ${Platform.select({\n        web: 'https://yourwebsite.com/',\n        default: 'com.your.app:/oauthredirect',\n      })}`\n    );\n  }\n\n  /**\n   * Load and return a valid auth request based on the input config.\n   */\n  async getAuthRequestConfigAsync(): Promise<AuthRequestConfig> {\n    if (this.usePKCE) {\n      await this.ensureCodeIsSetupAsync();\n    }\n\n    return {\n      responseType: this.responseType,\n      clientId: this.clientId,\n      redirectUri: this.redirectUri,\n      scopes: this.scopes,\n      clientSecret: this.clientSecret,\n      codeChallenge: this.codeChallenge,\n      codeChallengeMethod: this.codeChallengeMethod,\n      prompt: this.prompt,\n      state: this.state,\n      extraParams: this.extraParams,\n      usePKCE: this.usePKCE,\n    };\n  }\n\n  /**\n   * Prompt a user to authorize for a code.\n   *\n   * @param discovery\n   * @param promptOptions\n   */\n  async promptAsync(\n    discovery: AuthDiscoveryDocument,\n    { url, proxyOptions, ...options }: AuthRequestPromptOptions = {}\n  ): Promise<AuthSessionResult> {\n    if (!url) {\n      if (!this.url) {\n        // Generate a new url\n        return this.promptAsync(discovery, {\n          ...options,\n          url: await this.makeAuthUrlAsync(discovery),\n        });\n      }\n      // Reuse the preloaded url\n      url = this.url;\n    }\n\n    // Prevent accidentally starting to an empty url\n    invariant(\n      url,\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n\n    let startUrl: string = url!;\n    let returnUrl: string = this.redirectUri;\n    if (options.useProxy) {\n      returnUrl = sessionUrlProvider.getDefaultReturnUrl(proxyOptions?.path, proxyOptions);\n      startUrl = sessionUrlProvider.getStartUrl(url, returnUrl, options.projectNameForProxy);\n    }\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (_authLock) {\n      if (__DEV__) {\n        console.warn(\n          'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n        );\n      }\n\n      return { type: 'locked' };\n    }\n\n    // About to start session, set lock\n    _authLock = true;\n\n    let result: WebBrowser.WebBrowserAuthSessionResult;\n    try {\n      const { useProxy, ...openOptions } = options;\n      result = await WebBrowser.openAuthSessionAsync(startUrl, returnUrl, openOptions);\n    } finally {\n      _authLock = false;\n    }\n\n    if (result.type === 'opened') {\n      // This should never happen\n      throw new Error('An unexpected error occurred');\n    }\n    if (result.type !== 'success') {\n      return { type: result.type };\n    }\n\n    return this.parseReturnUrl(result.url);\n  }\n\n  parseReturnUrl(url: string): AuthSessionResult {\n    const { params, errorCode } = QueryParams.getQueryParams(url);\n    const { state, error = errorCode } = params;\n\n    let parsedError: AuthError | null = null;\n    let authentication: TokenResponse | null = null;\n    if (state !== this.state) {\n      // This is a non-standard error\n      parsedError = new AuthError({\n        error: 'state_mismatch',\n        error_description:\n          'Cross-Site request verification failed. Cached state and returned state do not match.',\n      });\n    } else if (error) {\n      parsedError = new AuthError({ error, ...params });\n    }\n    if (params.access_token) {\n      authentication = TokenResponse.fromQueryParams(params);\n    }\n\n    return {\n      type: parsedError ? 'error' : 'success',\n      error: parsedError,\n      url,\n      params,\n      authentication,\n\n      // Return errorCode for legacy\n      errorCode,\n    };\n  }\n\n  /**\n   * Create the URL for authorization.\n   *\n   * @param discovery\n   */\n  async makeAuthUrlAsync(discovery: AuthDiscoveryDocument): Promise<string> {\n    const request = await this.getAuthRequestConfigAsync();\n    if (!request.state) throw new Error('Cannot make request URL without a valid `state` loaded');\n\n    // Create a query string\n    const params: Record<string, string> = {};\n\n    if (request.codeChallenge) {\n      params.code_challenge = request.codeChallenge;\n    }\n\n    // copy over extra params\n    for (const extra in request.extraParams) {\n      if (extra in request.extraParams) {\n        params[extra] = request.extraParams[extra];\n      }\n    }\n\n    if (request.usePKCE && request.codeChallengeMethod) {\n      params.code_challenge_method = request.codeChallengeMethod;\n    }\n\n    if (request.clientSecret) {\n      params.client_secret = request.clientSecret;\n    }\n\n    if (request.prompt) {\n      params.prompt = request.prompt;\n    }\n\n    // These overwrite any extra params\n    params.redirect_uri = request.redirectUri;\n    params.client_id = request.clientId;\n    params.response_type = request.responseType!;\n    params.state = request.state;\n\n    if (request.scopes?.length) {\n      params.scope = request.scopes.join(' ');\n    }\n\n    const query = QueryParams.buildQueryString(params);\n    // Store the URL for later\n    this.url = `${discovery.authorizationEndpoint}?${query}`;\n    return this.url;\n  }\n\n  private async ensureCodeIsSetupAsync(): Promise<void> {\n    if (this.codeVerifier) {\n      return;\n    }\n\n    // This method needs to be resolved like all other native methods.\n    const { codeVerifier, codeChallenge } = await PKCE.buildCodeAsync();\n\n    this.codeVerifier = codeVerifier;\n    this.codeChallenge = codeChallenge;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}