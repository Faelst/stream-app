{"ast":null,"code":"import _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport invariant from 'invariant';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as Base64 from \"./Base64\";\nimport { TokenError } from \"./Errors\";\nimport { requestAsync } from \"./Fetch\";\nimport { GrantType } from \"./TokenRequest.types\";\nexport function getCurrentTimeInSeconds() {\n  return Math.floor(Date.now() / 1000);\n}\nexport var TokenResponse = function () {\n  function TokenResponse(response) {\n    var _response$tokenType, _response$issuedAt;\n    _classCallCheck(this, TokenResponse);\n    this.accessToken = response.accessToken;\n    this.tokenType = (_response$tokenType = response.tokenType) != null ? _response$tokenType : 'bearer';\n    this.expiresIn = response.expiresIn;\n    this.refreshToken = response.refreshToken;\n    this.scope = response.scope;\n    this.state = response.state;\n    this.idToken = response.idToken;\n    this.issuedAt = (_response$issuedAt = response.issuedAt) != null ? _response$issuedAt : getCurrentTimeInSeconds();\n  }\n  _createClass(TokenResponse, [{\n    key: \"applyResponseConfig\",\n    value: function applyResponseConfig(response) {\n      var _response$accessToken, _ref, _response$tokenType2, _response$expiresIn, _response$refreshToke, _response$scope, _response$state, _response$idToken, _ref2, _response$issuedAt2;\n      this.accessToken = (_response$accessToken = response.accessToken) != null ? _response$accessToken : this.accessToken;\n      this.tokenType = (_ref = (_response$tokenType2 = response.tokenType) != null ? _response$tokenType2 : this.tokenType) != null ? _ref : 'bearer';\n      this.expiresIn = (_response$expiresIn = response.expiresIn) != null ? _response$expiresIn : this.expiresIn;\n      this.refreshToken = (_response$refreshToke = response.refreshToken) != null ? _response$refreshToke : this.refreshToken;\n      this.scope = (_response$scope = response.scope) != null ? _response$scope : this.scope;\n      this.state = (_response$state = response.state) != null ? _response$state : this.state;\n      this.idToken = (_response$idToken = response.idToken) != null ? _response$idToken : this.idToken;\n      this.issuedAt = (_ref2 = (_response$issuedAt2 = response.issuedAt) != null ? _response$issuedAt2 : this.issuedAt) != null ? _ref2 : getCurrentTimeInSeconds();\n    }\n  }, {\n    key: \"getRequestConfig\",\n    value: function getRequestConfig() {\n      return {\n        accessToken: this.accessToken,\n        idToken: this.idToken,\n        refreshToken: this.refreshToken,\n        scope: this.scope,\n        state: this.state,\n        tokenType: this.tokenType,\n        issuedAt: this.issuedAt,\n        expiresIn: this.expiresIn\n      };\n    }\n  }, {\n    key: \"refreshAsync\",\n    value: function refreshAsync(config, discovery) {\n      var _response$refreshToke2;\n      var request, response, json;\n      return _regeneratorRuntime.async(function refreshAsync$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            request = new RefreshTokenRequest(_objectSpread(_objectSpread({}, config), {}, {\n              refreshToken: this.refreshToken\n            }));\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(request.performAsync(discovery));\n          case 3:\n            response = _context.sent;\n            response.refreshToken = (_response$refreshToke2 = response.refreshToken) != null ? _response$refreshToke2 : this.refreshToken;\n            json = response.getRequestConfig();\n            this.applyResponseConfig(json);\n            return _context.abrupt(\"return\", this);\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"shouldRefresh\",\n    value: function shouldRefresh() {\n      return !(TokenResponse.isTokenFresh(this) || !this.refreshToken);\n    }\n  }], [{\n    key: \"isTokenFresh\",\n    value: function isTokenFresh(token) {\n      var secondsMargin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60 * 10 * -1;\n      if (!token) {\n        return false;\n      }\n      if (token.expiresIn) {\n        var now = getCurrentTimeInSeconds();\n        return now < token.issuedAt + token.expiresIn + secondsMargin;\n      }\n      return true;\n    }\n  }, {\n    key: \"fromQueryParams\",\n    value: function fromQueryParams(params) {\n      return new TokenResponse({\n        accessToken: params.access_token,\n        refreshToken: params.refresh_token,\n        scope: params.scope,\n        state: params.state,\n        idToken: params.id_token,\n        tokenType: params.token_type,\n        expiresIn: params.expires_in,\n        issuedAt: params.issued_at\n      });\n    }\n  }]);\n  return TokenResponse;\n}();\nvar Request = function () {\n  function Request(request) {\n    _classCallCheck(this, Request);\n    this.request = request;\n  }\n  _createClass(Request, [{\n    key: \"performAsync\",\n    value: function performAsync(discovery) {\n      return _regeneratorRuntime.async(function performAsync$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            throw new Error('performAsync must be extended');\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getRequestConfig\",\n    value: function getRequestConfig() {\n      throw new Error('getRequestConfig must be extended');\n    }\n  }, {\n    key: \"getQueryBody\",\n    value: function getQueryBody() {\n      throw new Error('getQueryBody must be extended');\n    }\n  }]);\n  return Request;\n}();\nvar TokenRequest = function (_Request) {\n  _inherits(TokenRequest, _Request);\n  var _super = _createSuper(TokenRequest);\n  function TokenRequest(request, grantType) {\n    var _this;\n    _classCallCheck(this, TokenRequest);\n    _this = _super.call(this, request);\n    _this.grantType = grantType;\n    _this.clientId = request.clientId;\n    _this.clientSecret = request.clientSecret;\n    _this.extraParams = request.extraParams;\n    _this.scopes = request.scopes;\n    return _this;\n  }\n  _createClass(TokenRequest, [{\n    key: \"getHeaders\",\n    value: function getHeaders() {\n      var headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n      if (typeof this.clientSecret !== 'undefined') {\n        var encodedClientId = encodeURIComponent(this.clientId);\n        var encodedClientSecret = encodeURIComponent(this.clientSecret);\n        var credentials = encodedClientId + \":\" + encodedClientSecret;\n        var basicAuth = Base64.encodeNoWrap(credentials);\n        headers.Authorization = \"Basic \" + basicAuth;\n      }\n      return headers;\n    }\n  }, {\n    key: \"performAsync\",\n    value: function performAsync(discovery) {\n      var response;\n      return _regeneratorRuntime.async(function performAsync$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            invariant(discovery.tokenEndpoint, \"Cannot invoke `performAsync()` without a valid tokenEndpoint\");\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(requestAsync(discovery.tokenEndpoint, {\n              dataType: 'json',\n              method: 'POST',\n              headers: this.getHeaders(),\n              body: this.getQueryBody()\n            }));\n          case 3:\n            response = _context3.sent;\n            if (!('error' in response)) {\n              _context3.next = 6;\n              break;\n            }\n            throw new TokenError(response);\n          case 6:\n            return _context3.abrupt(\"return\", new TokenResponse({\n              accessToken: response.access_token,\n              tokenType: response.token_type,\n              expiresIn: response.expires_in,\n              refreshToken: response.refresh_token,\n              scope: response.scope,\n              idToken: response.id_token,\n              issuedAt: response.issued_at\n            }));\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getQueryBody\",\n    value: function getQueryBody() {\n      var queryBody = {\n        grant_type: this.grantType\n      };\n      if (!this.clientSecret) {\n        queryBody.client_id = this.clientId;\n      }\n      if (this.scopes) {\n        queryBody.scope = this.scopes.join(' ');\n      }\n      if (this.extraParams) {\n        for (var extra in this.extraParams) {\n          if (extra in this.extraParams && !(extra in queryBody)) {\n            queryBody[extra] = this.extraParams[extra];\n          }\n        }\n      }\n      return queryBody;\n    }\n  }]);\n  return TokenRequest;\n}(Request);\nexport var AccessTokenRequest = function (_TokenRequest) {\n  _inherits(AccessTokenRequest, _TokenRequest);\n  var _super2 = _createSuper(AccessTokenRequest);\n  function AccessTokenRequest(options) {\n    var _this2;\n    _classCallCheck(this, AccessTokenRequest);\n    invariant(options.redirectUri, \"`AccessTokenRequest` requires a valid `redirectUri` (it must also match the one used in the auth request). Example: \" + Platform.select({\n      web: 'https://yourwebsite.com/redirect',\n      default: 'myapp://redirect'\n    }));\n    invariant(options.code, \"`AccessTokenRequest` requires a valid authorization `code`. This is what's received from the authorization server after an auth request.\");\n    _this2 = _super2.call(this, options, GrantType.AuthorizationCode);\n    _this2.code = options.code;\n    _this2.redirectUri = options.redirectUri;\n    return _this2;\n  }\n  _createClass(AccessTokenRequest, [{\n    key: \"getQueryBody\",\n    value: function getQueryBody() {\n      var queryBody = _get(_getPrototypeOf(AccessTokenRequest.prototype), \"getQueryBody\", this).call(this);\n      if (this.redirectUri) {\n        queryBody.redirect_uri = this.redirectUri;\n      }\n      if (this.code) {\n        queryBody.code = this.code;\n      }\n      return queryBody;\n    }\n  }, {\n    key: \"getRequestConfig\",\n    value: function getRequestConfig() {\n      return {\n        clientId: this.clientId,\n        clientSecret: this.clientSecret,\n        grantType: this.grantType,\n        code: this.code,\n        redirectUri: this.redirectUri,\n        extraParams: this.extraParams,\n        scopes: this.scopes\n      };\n    }\n  }]);\n  return AccessTokenRequest;\n}(TokenRequest);\nexport var RefreshTokenRequest = function (_TokenRequest2) {\n  _inherits(RefreshTokenRequest, _TokenRequest2);\n  var _super3 = _createSuper(RefreshTokenRequest);\n  function RefreshTokenRequest(options) {\n    var _this3;\n    _classCallCheck(this, RefreshTokenRequest);\n    invariant(options.refreshToken, \"`RefreshTokenRequest` requires a valid `refreshToken`.\");\n    _this3 = _super3.call(this, options, GrantType.RefreshToken);\n    _this3.refreshToken = options.refreshToken;\n    return _this3;\n  }\n  _createClass(RefreshTokenRequest, [{\n    key: \"getQueryBody\",\n    value: function getQueryBody() {\n      var queryBody = _get(_getPrototypeOf(RefreshTokenRequest.prototype), \"getQueryBody\", this).call(this);\n      if (this.refreshToken) {\n        queryBody.refresh_token = this.refreshToken;\n      }\n      return queryBody;\n    }\n  }, {\n    key: \"getRequestConfig\",\n    value: function getRequestConfig() {\n      return {\n        clientId: this.clientId,\n        clientSecret: this.clientSecret,\n        grantType: this.grantType,\n        refreshToken: this.refreshToken,\n        extraParams: this.extraParams,\n        scopes: this.scopes\n      };\n    }\n  }]);\n  return RefreshTokenRequest;\n}(TokenRequest);\nexport var RevokeTokenRequest = function (_Request2) {\n  _inherits(RevokeTokenRequest, _Request2);\n  var _super4 = _createSuper(RevokeTokenRequest);\n  function RevokeTokenRequest(request) {\n    var _this4;\n    _classCallCheck(this, RevokeTokenRequest);\n    _this4 = _super4.call(this, request);\n    invariant(request.token, \"`RevokeTokenRequest` requires a valid `token` to revoke.\");\n    _this4.clientId = request.clientId;\n    _this4.clientSecret = request.clientSecret;\n    _this4.token = request.token;\n    _this4.tokenTypeHint = request.tokenTypeHint;\n    return _this4;\n  }\n  _createClass(RevokeTokenRequest, [{\n    key: \"getHeaders\",\n    value: function getHeaders() {\n      var headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n      if (typeof this.clientSecret !== 'undefined' && this.clientId) {\n        var encodedClientId = encodeURIComponent(this.clientId);\n        var encodedClientSecret = encodeURIComponent(this.clientSecret);\n        var credentials = encodedClientId + \":\" + encodedClientSecret;\n        var basicAuth = Base64.encodeNoWrap(credentials);\n        headers.Authorization = \"Basic \" + basicAuth;\n      }\n      return headers;\n    }\n  }, {\n    key: \"performAsync\",\n    value: function performAsync(discovery) {\n      return _regeneratorRuntime.async(function performAsync$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            invariant(discovery.revocationEndpoint, \"Cannot invoke `performAsync()` without a valid revocationEndpoint\");\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(requestAsync(discovery.revocationEndpoint, {\n              method: 'POST',\n              headers: this.getHeaders(),\n              body: this.getQueryBody()\n            }));\n          case 3:\n            return _context4.abrupt(\"return\", true);\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getRequestConfig\",\n    value: function getRequestConfig() {\n      return {\n        clientId: this.clientId,\n        clientSecret: this.clientSecret,\n        token: this.token,\n        tokenTypeHint: this.tokenTypeHint\n      };\n    }\n  }, {\n    key: \"getQueryBody\",\n    value: function getQueryBody() {\n      var queryBody = {\n        token: this.token\n      };\n      if (this.tokenTypeHint) {\n        queryBody.token_type_hint = this.tokenTypeHint;\n      }\n      if (this.clientId) {\n        queryBody.client_id = this.clientId;\n      }\n      if (this.clientSecret) {\n        queryBody.client_secret = this.clientSecret;\n      }\n      return queryBody;\n    }\n  }]);\n  return RevokeTokenRequest;\n}(Request);\nexport function exchangeCodeAsync(config, discovery) {\n  var request = new AccessTokenRequest(config);\n  return request.performAsync(discovery);\n}\nexport function refreshAsync(config, discovery) {\n  var request = new RefreshTokenRequest(config);\n  return request.performAsync(discovery);\n}\nexport function revokeAsync(config, discovery) {\n  var request = new RevokeTokenRequest(config);\n  return request.performAsync(discovery);\n}\nexport function fetchUserInfoAsync(config, discovery) {\n  if (!discovery.userInfoEndpoint) {\n    throw new Error('User info endpoint is not defined in the service config discovery document');\n  }\n  return requestAsync(discovery.userInfoEndpoint, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: \"Bearer \" + config.accessToken\n    },\n    dataType: 'json',\n    method: 'GET'\n  });\n}","map":{"version":3,"names":["invariant","Platform","Base64","TokenError","requestAsync","GrantType","getCurrentTimeInSeconds","Math","floor","Date","now","TokenResponse","response","_response$tokenType","_response$issuedAt","_classCallCheck","accessToken","tokenType","expiresIn","refreshToken","scope","state","idToken","issuedAt","_createClass","key","value","applyResponseConfig","_response$accessToken","_ref","_response$tokenType2","_response$expiresIn","_response$refreshToke","_response$scope","_response$state","_response$idToken","_ref2","_response$issuedAt2","getRequestConfig","refreshAsync","config","discovery","_response$refreshToke2","request","json","_regeneratorRuntime","async","refreshAsync$","_context","prev","next","RefreshTokenRequest","_objectSpread","awrap","performAsync","sent","abrupt","stop","Promise","shouldRefresh","isTokenFresh","token","secondsMargin","arguments","length","undefined","fromQueryParams","params","access_token","refresh_token","id_token","token_type","expires_in","issued_at","Request","performAsync$","_context2","Error","getQueryBody","TokenRequest","_Request","_inherits","_super","_createSuper","grantType","_this","call","clientId","clientSecret","extraParams","scopes","getHeaders","headers","encodedClientId","encodeURIComponent","encodedClientSecret","credentials","basicAuth","encodeNoWrap","Authorization","_context3","tokenEndpoint","dataType","method","body","queryBody","grant_type","client_id","join","extra","AccessTokenRequest","_TokenRequest","_super2","options","_this2","redirectUri","select","web","default","code","AuthorizationCode","_get","_getPrototypeOf","prototype","redirect_uri","_TokenRequest2","_super3","_this3","RefreshToken","RevokeTokenRequest","_Request2","_super4","_this4","tokenTypeHint","_context4","revocationEndpoint","token_type_hint","client_secret","exchangeCodeAsync","revokeAsync","fetchUserInfoAsync","userInfoEndpoint"],"sources":["/Users/fael_st/www/react-native/stream-app/node_modules/expo-auth-session/src/TokenRequest.ts"],"sourcesContent":["import invariant from 'invariant';\nimport { Platform } from 'react-native';\n\nimport * as Base64 from './Base64';\nimport * as ServiceConfig from './Discovery';\nimport { ResponseErrorConfig, TokenError } from './Errors';\nimport { Headers, requestAsync } from './Fetch';\nimport {\n  AccessTokenRequestConfig,\n  GrantType,\n  RefreshTokenRequestConfig,\n  RevokeTokenRequestConfig,\n  ServerTokenResponseConfig,\n  TokenRequestConfig,\n  TokenResponseConfig,\n  TokenType,\n  TokenTypeHint,\n} from './TokenRequest.types';\n\n/**\n * Returns the current time in seconds.\n */\nexport function getCurrentTimeInSeconds(): number {\n  return Math.floor(Date.now() / 1000);\n}\n\n/**\n * Token Response.\n *\n * [Section 5.1](https://tools.ietf.org/html/rfc6749#section-5.1)\n */\nexport class TokenResponse implements TokenResponseConfig {\n  /**\n   * Determines whether a token refresh request must be made to refresh the tokens\n   *\n   * @param token\n   * @param secondsMargin\n   */\n  static isTokenFresh(\n    token: Pick<TokenResponse, 'expiresIn' | 'issuedAt'>,\n    /**\n     * -10 minutes in seconds\n     */\n    secondsMargin: number = 60 * 10 * -1\n  ): boolean {\n    if (!token) {\n      return false;\n    }\n    if (token.expiresIn) {\n      const now = getCurrentTimeInSeconds();\n      return now < token.issuedAt + token.expiresIn + secondsMargin;\n    }\n    // if there is no expiration time but we have an access token, it is assumed to never expire\n    return true;\n  }\n  /**\n   * Creates a `TokenResponse` from query parameters returned from an `AuthRequest`.\n   *\n   * @param params\n   */\n  static fromQueryParams(params: Record<string, any>): TokenResponse {\n    return new TokenResponse({\n      accessToken: params.access_token,\n      refreshToken: params.refresh_token,\n      scope: params.scope,\n      state: params.state,\n      idToken: params.id_token,\n      tokenType: params.token_type,\n      expiresIn: params.expires_in,\n      issuedAt: params.issued_at,\n    });\n  }\n\n  accessToken: string;\n  tokenType: TokenType;\n  expiresIn?: number;\n  refreshToken?: string;\n  scope?: string;\n  state?: string;\n  idToken?: string;\n  issuedAt: number;\n\n  constructor(response: TokenResponseConfig) {\n    this.accessToken = response.accessToken;\n    this.tokenType = response.tokenType ?? 'bearer';\n    this.expiresIn = response.expiresIn;\n    this.refreshToken = response.refreshToken;\n    this.scope = response.scope;\n    this.state = response.state;\n    this.idToken = response.idToken;\n    this.issuedAt = response.issuedAt ?? getCurrentTimeInSeconds();\n  }\n\n  private applyResponseConfig(response: TokenResponseConfig) {\n    this.accessToken = response.accessToken ?? this.accessToken;\n    this.tokenType = response.tokenType ?? this.tokenType ?? 'bearer';\n    this.expiresIn = response.expiresIn ?? this.expiresIn;\n    this.refreshToken = response.refreshToken ?? this.refreshToken;\n    this.scope = response.scope ?? this.scope;\n    this.state = response.state ?? this.state;\n    this.idToken = response.idToken ?? this.idToken;\n    this.issuedAt = response.issuedAt ?? this.issuedAt ?? getCurrentTimeInSeconds();\n  }\n\n  getRequestConfig(): TokenResponseConfig {\n    return {\n      accessToken: this.accessToken,\n      idToken: this.idToken,\n      refreshToken: this.refreshToken,\n      scope: this.scope,\n      state: this.state,\n      tokenType: this.tokenType,\n      issuedAt: this.issuedAt,\n      expiresIn: this.expiresIn,\n    };\n  }\n\n  async refreshAsync(\n    config: Omit<TokenRequestConfig, 'grantType' | 'refreshToken'>,\n    discovery: Pick<ServiceConfig.DiscoveryDocument, 'tokenEndpoint'>\n  ): Promise<TokenResponse> {\n    const request = new RefreshTokenRequest({\n      ...config,\n      refreshToken: this.refreshToken,\n    });\n    const response = await request.performAsync(discovery);\n    // Custom: reuse the refresh token if one wasn't returned\n    response.refreshToken = response.refreshToken ?? this.refreshToken;\n    const json = response.getRequestConfig();\n    this.applyResponseConfig(json);\n    return this;\n  }\n\n  shouldRefresh(): boolean {\n    // no refresh token available and token has expired\n    return !(TokenResponse.isTokenFresh(this) || !this.refreshToken);\n  }\n}\n\nclass Request<T, B> {\n  constructor(protected request: T) {}\n\n  async performAsync(discovery: ServiceConfig.DiscoveryDocument): Promise<B> {\n    throw new Error('performAsync must be extended');\n  }\n\n  getRequestConfig(): T {\n    throw new Error('getRequestConfig must be extended');\n  }\n\n  getQueryBody(): Record<string, string> {\n    throw new Error('getQueryBody must be extended');\n  }\n}\n\n/**\n * A generic token request.\n */\nclass TokenRequest<T extends TokenRequestConfig> extends Request<T, TokenResponse> {\n  readonly clientId: string;\n  readonly clientSecret?: string;\n  readonly scopes?: string[];\n  readonly extraParams?: Record<string, string>;\n\n  constructor(request, public grantType: GrantType) {\n    super(request);\n    this.clientId = request.clientId;\n    this.clientSecret = request.clientSecret;\n    this.extraParams = request.extraParams;\n    this.scopes = request.scopes;\n  }\n\n  getHeaders(): Headers {\n    const headers: Headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n    if (typeof this.clientSecret !== 'undefined') {\n      // If client secret exists, it should be converted to base64\n      // https://tools.ietf.org/html/rfc6749#section-2.3.1\n      const encodedClientId = encodeURIComponent(this.clientId);\n      const encodedClientSecret = encodeURIComponent(this.clientSecret);\n      const credentials = `${encodedClientId}:${encodedClientSecret}`;\n      const basicAuth = Base64.encodeNoWrap(credentials);\n      headers.Authorization = `Basic ${basicAuth}`;\n    }\n\n    return headers;\n  }\n\n  async performAsync(discovery: Pick<ServiceConfig.DiscoveryDocument, 'tokenEndpoint'>) {\n    // redirect URI must not be nil\n    invariant(\n      discovery.tokenEndpoint,\n      `Cannot invoke \\`performAsync()\\` without a valid tokenEndpoint`\n    );\n    const response = await requestAsync<ServerTokenResponseConfig | ResponseErrorConfig>(\n      discovery.tokenEndpoint,\n      {\n        dataType: 'json',\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: this.getQueryBody(),\n      }\n    );\n\n    if ('error' in response) {\n      throw new TokenError(response);\n    }\n\n    return new TokenResponse({\n      accessToken: response.access_token,\n      tokenType: response.token_type,\n      expiresIn: response.expires_in,\n      refreshToken: response.refresh_token,\n      scope: response.scope,\n      idToken: response.id_token,\n      issuedAt: response.issued_at,\n    });\n  }\n\n  getQueryBody() {\n    const queryBody: Record<string, string> = {\n      grant_type: this.grantType,\n    };\n\n    if (!this.clientSecret) {\n      // Only add the client ID if client secret is not present, otherwise pass the client id with the secret in the request body.\n      queryBody.client_id = this.clientId;\n    }\n\n    if (this.scopes) {\n      queryBody.scope = this.scopes.join(' ');\n    }\n\n    if (this.extraParams) {\n      for (const extra in this.extraParams) {\n        if (extra in this.extraParams && !(extra in queryBody)) {\n          queryBody[extra] = this.extraParams[extra];\n        }\n      }\n    }\n    return queryBody;\n  }\n}\n\n/**\n * Access token request. Exchange an authorization code for a user access token.\n *\n * [Section 4.1.3](https://tools.ietf.org/html/rfc6749#section-4.1.3)\n */\nexport class AccessTokenRequest\n  extends TokenRequest<AccessTokenRequestConfig>\n  implements AccessTokenRequestConfig\n{\n  readonly code: string;\n  readonly redirectUri: string;\n\n  constructor(options: AccessTokenRequestConfig) {\n    invariant(\n      options.redirectUri,\n      `\\`AccessTokenRequest\\` requires a valid \\`redirectUri\\` (it must also match the one used in the auth request). Example: ${Platform.select(\n        {\n          web: 'https://yourwebsite.com/redirect',\n          default: 'myapp://redirect',\n        }\n      )}`\n    );\n\n    invariant(\n      options.code,\n      `\\`AccessTokenRequest\\` requires a valid authorization \\`code\\`. This is what's received from the authorization server after an auth request.`\n    );\n    super(options, GrantType.AuthorizationCode);\n    this.code = options.code;\n    this.redirectUri = options.redirectUri;\n  }\n\n  getQueryBody() {\n    const queryBody: Record<string, string> = super.getQueryBody();\n\n    if (this.redirectUri) {\n      queryBody.redirect_uri = this.redirectUri;\n    }\n\n    if (this.code) {\n      queryBody.code = this.code;\n    }\n\n    return queryBody;\n  }\n\n  getRequestConfig() {\n    return {\n      clientId: this.clientId,\n      clientSecret: this.clientSecret,\n      grantType: this.grantType,\n      code: this.code,\n      redirectUri: this.redirectUri,\n      extraParams: this.extraParams,\n      scopes: this.scopes,\n    };\n  }\n}\n\n/**\n * Refresh request.\n *\n * [Section 6](https://tools.ietf.org/html/rfc6749#section-6)\n */\nexport class RefreshTokenRequest\n  extends TokenRequest<RefreshTokenRequestConfig>\n  implements RefreshTokenRequestConfig\n{\n  readonly refreshToken?: string;\n\n  constructor(options: RefreshTokenRequestConfig) {\n    invariant(options.refreshToken, `\\`RefreshTokenRequest\\` requires a valid \\`refreshToken\\`.`);\n    super(options, GrantType.RefreshToken);\n    this.refreshToken = options.refreshToken;\n  }\n\n  getQueryBody() {\n    const queryBody = super.getQueryBody();\n\n    if (this.refreshToken) {\n      queryBody.refresh_token = this.refreshToken;\n    }\n\n    return queryBody;\n  }\n\n  getRequestConfig() {\n    return {\n      clientId: this.clientId,\n      clientSecret: this.clientSecret,\n      grantType: this.grantType,\n      refreshToken: this.refreshToken,\n      extraParams: this.extraParams,\n      scopes: this.scopes,\n    };\n  }\n}\n\n/**\n * Revocation request for a given token.\n *\n * [Section 2.1](https://tools.ietf.org/html/rfc7009#section-2.1)\n */\nexport class RevokeTokenRequest\n  extends Request<RevokeTokenRequestConfig, boolean>\n  implements RevokeTokenRequestConfig\n{\n  readonly clientId?: string;\n  readonly clientSecret?: string;\n  readonly token: string;\n  readonly tokenTypeHint?: TokenTypeHint;\n\n  constructor(request: RevokeTokenRequestConfig) {\n    super(request);\n    invariant(request.token, `\\`RevokeTokenRequest\\` requires a valid \\`token\\` to revoke.`);\n    this.clientId = request.clientId;\n    this.clientSecret = request.clientSecret;\n    this.token = request.token;\n    this.tokenTypeHint = request.tokenTypeHint;\n  }\n\n  getHeaders(): Headers {\n    const headers: Headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n    if (typeof this.clientSecret !== 'undefined' && this.clientId) {\n      // If client secret exists, it should be converted to base64\n      // https://tools.ietf.org/html/rfc6749#section-2.3.1\n      const encodedClientId = encodeURIComponent(this.clientId);\n      const encodedClientSecret = encodeURIComponent(this.clientSecret);\n      const credentials = `${encodedClientId}:${encodedClientSecret}`;\n      const basicAuth = Base64.encodeNoWrap(credentials);\n      headers.Authorization = `Basic ${basicAuth}`;\n    }\n\n    return headers;\n  }\n\n  /**\n   * Perform a token revocation request.\n   *\n   * @param discovery The `revocationEndpoint` for a provider.\n   */\n  async performAsync(discovery: Pick<ServiceConfig.DiscoveryDocument, 'revocationEndpoint'>) {\n    invariant(\n      discovery.revocationEndpoint,\n      `Cannot invoke \\`performAsync()\\` without a valid revocationEndpoint`\n    );\n    await requestAsync<boolean>(discovery.revocationEndpoint, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: this.getQueryBody(),\n    });\n\n    return true;\n  }\n\n  getRequestConfig() {\n    return {\n      clientId: this.clientId,\n      clientSecret: this.clientSecret,\n      token: this.token,\n      tokenTypeHint: this.tokenTypeHint,\n    };\n  }\n\n  getQueryBody(): Record<string, string> {\n    const queryBody: Record<string, string> = { token: this.token };\n    if (this.tokenTypeHint) {\n      queryBody.token_type_hint = this.tokenTypeHint;\n    }\n    // Include client creds https://tools.ietf.org/html/rfc6749#section-2.3.1\n    if (this.clientId) {\n      queryBody.client_id = this.clientId;\n    }\n    if (this.clientSecret) {\n      queryBody.client_secret = this.clientSecret;\n    }\n    return queryBody;\n  }\n}\n\n// @needsAudit\n/**\n * Exchange an authorization code for an access token that can be used to get data from the provider.\n *\n * @param config Configuration used to exchange the code for a token.\n * @param discovery The `tokenEndpoint` for a provider.\n * @return Returns a discovery document with a valid `tokenEndpoint` URL.\n */\nexport function exchangeCodeAsync(\n  config: AccessTokenRequestConfig,\n  discovery: Pick<ServiceConfig.DiscoveryDocument, 'tokenEndpoint'>\n): Promise<TokenResponse> {\n  const request = new AccessTokenRequest(config);\n  return request.performAsync(discovery);\n}\n\n// @needsAudit\n/**\n * Refresh an access token.\n * - If the provider didn't return a `refresh_token` then the access token may not be refreshed.\n * - If the provider didn't return a `expires_in` then it's assumed that the token does not expire.\n * - Determine if a token needs to be refreshed via `TokenResponse.isTokenFresh()` or `shouldRefresh()` on an instance of `TokenResponse`.\n *\n * @see [Section 6](https://tools.ietf.org/html/rfc6749#section-6).\n *\n * @param config Configuration used to refresh the given access token.\n * @param discovery The `tokenEndpoint` for a provider.\n * @return Returns a discovery document with a valid `tokenEndpoint` URL.\n */\nexport function refreshAsync(\n  config: RefreshTokenRequestConfig,\n  discovery: Pick<ServiceConfig.DiscoveryDocument, 'tokenEndpoint'>\n): Promise<TokenResponse> {\n  const request = new RefreshTokenRequest(config);\n  return request.performAsync(discovery);\n}\n\n// @needsAudit\n/**\n * Revoke a token with a provider. This makes the token unusable, effectively requiring the user to login again.\n *\n * @param config Configuration used to revoke a refresh or access token.\n * @param discovery The `revocationEndpoint` for a provider.\n * @return Returns a discovery document with a valid `revocationEndpoint` URL. Many providers do not support this feature.\n */\nexport function revokeAsync(\n  config: RevokeTokenRequestConfig,\n  discovery: Pick<ServiceConfig.DiscoveryDocument, 'revocationEndpoint'>\n): Promise<boolean> {\n  const request = new RevokeTokenRequest(config);\n  return request.performAsync(discovery);\n}\n\n/**\n * Fetch generic user info from the provider's OpenID Connect `userInfoEndpoint` (if supported).\n *\n * @see [UserInfo](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo).\n *\n * @param config The `accessToken` for a user, returned from a code exchange or auth request.\n * @param discovery The `userInfoEndpoint` for a provider.\n */\nexport function fetchUserInfoAsync(\n  config: Pick<TokenResponse, 'accessToken'>,\n  discovery: Pick<ServiceConfig.DiscoveryDocument, 'userInfoEndpoint'>\n): Promise<Record<string, any>> {\n  if (!discovery.userInfoEndpoint) {\n    throw new Error('User info endpoint is not defined in the service config discovery document');\n  }\n  return requestAsync<Record<string, any>>(discovery.userInfoEndpoint, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${config.accessToken}`,\n    },\n    dataType: 'json',\n    method: 'GET',\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}